# -*- coding: utf-8 -*-

# Copyright 2016 EDF R&D
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License Version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, you may download a copy of license
# from https://www.gnu.org/licenses/gpl-3.0.

"""
Item searcher
-------------

The module implements searcher for *Data Settings* view in
AsterStudy GUI.

"""


from PyQt5 import Qt as Q

from ...common import load_icon, translate
from ..widgets import SearchWidget
from .model import SearchContext

# note: the following pragma is added to prevent pylint complaining
#       about functions that follow Qt naming conventions;
#       it should go after all global functions
# pragma pylint: disable=invalid-name


class Searcher(Q.QWidget):
    """
    Search for *Data Settings* view.
    """

    def __init__(self, astergui, view):
        """
        Create searcher.

        Arguments:
            astergui (AsterGui): *AsterGui* instance.
            view (QWidget): Parent view.
        """
        super().__init__(view)
        self._astergui = astergui
        self._view = view
        self._items = []
        self._auto_hide = True

        self._filter = SearchWidget(self)
        self._filter.setToolTip(translate("Searcher", "Search criteria"))

        base = Q.QGridLayout(self)
        base.setContentsMargins(5, 0, 5, 5)

        self._context = Q.QComboBox(self)
        self._context.setToolTip(translate("Searcher", "Type of search"))
        for context in SearchContext.items():
            self._context.addItem(SearchContext.value2str(context), context)

        self._prev = Q.QToolButton(self)
        self._prev.setToolTip(translate("Searcher", "Find previous item"))
        self._prev.setIcon(load_icon("as_pic_find_prev.png"))
        self._prev.setObjectName("find_prev")

        self._next = Q.QToolButton(self)
        self._next.setToolTip(translate("Searcher", "Find next item"))
        self._next.setIcon(load_icon("as_pic_find_next.png"))
        self._next.setObjectName("find_next")

        close = Q.QToolButton(self)
        close.setToolTip(translate("Searcher", "Close search panel"))
        close.setIcon(load_icon("as_pic_find_close.png"))
        close.setObjectName("close_searcher")

        base.addWidget(self._filter, 0, 0, 1, 4)
        base.addWidget(self._context, 1, 0)
        base.addWidget(self._prev, 1, 1)
        base.addWidget(self._next, 1, 2)
        base.addWidget(close, 1, 3)

        self._timer = Q.QTimer(self)
        self._timer.setInterval(10000)
        self._timer.setSingleShot(True)

        close.clicked.connect(self._onTimeout)
        self._timer.timeout.connect(self._onTimeout)
        self._context.activated.connect(self._onContextActivated)
        self._filter.filterChanged.connect(self._onFilterChanged)
        self._view.updated.connect(self._onTimeout)

        self._prev.clicked.connect(self._onFindPrev)
        self._next.clicked.connect(self._onFindNext)

        self.setFocusProxy(self._filter)

        self.hide()

    def setAutoHide(self, value):
        """
        Enable / disable auto-hide feature.

        Arguments:
            value (bool): Auto-hide flag.
        """
        self._auto_hide = value
        self._restartTimer()

    def filter(self):
        """
        Get search pattern.

        Returns:
            (str): Search pattern.
        """
        return self._filter.filter()

    def context(self):
        """
        Get selected search context.

        Returns:
            (int): Search context (SearchContext).
        """
        return self._context.currentData()

    def keyPressEvent(self, event):
        """
        Reimplemented from QWidget to automatically close searcher
        on *Escape* key press.
        """
        if event.key() == Q.Qt.Key_Escape:
            if self.isVisibleTo(self.parentWidget()):
                if self.hasFocus():
                    self._view.setFocus()
                self.hide()
                event.accept()
            else:
                event.ignore()
        elif event.key() == Q.Qt.Key_Return or \
                event.key() == Q.Qt.Key_Enter:
            self._onFindNext()
        elif event.key() == Q.Qt.Key_F3:
            if event.modifiers() == Q.Qt.ShiftModifier:
                self._onFindPrev()
            elif event.modifiers() == Q.Qt.NoModifier:
                self._onFindNext()
        else:
            super().keyPressEvent(event)

    def setVisible(self, value):
        """
        Reimplemented from QWidget to clear searcher when it hides.
        """
        super().setVisible(value)
        if not value:
            self._filter.clear()
            if self._timer.isActive():
                self._timer.stop()
        else:
            self.setFocus()
            self._restartTimer()

    def _restartTimer(self):
        """
        Restart internal auto-hide timer.
        """
        if self._timer.isActive():
            self._timer.stop()
        if self._auto_hide:
            self._timer.start()

    def _onTimeout(self):
        """
        Invoked by auto-hide timer.
        Hides searcher.
        """
        if self.hasFocus():
            self._view.setFocus()
        self.hide()

    def _onContextActivated(self):
        """
        Invoked when search context is changed.
        Restarts search.
        """
        self._performSearch()

    def _onFilterChanged(self):
        """
        Invoked when search pattern is changed.
        Performs search.
        """
        self._performSearch()

    def _onFindNext(self):
        """
        Invoked when 'Find next' button is clicked.
        Performs forward search.
        """
        self._findNext(self._items)

    def _onFindPrev(self):
        """
        Invoked when 'Find previous' button is clicked.
        Performs backward search.
        """
        self._findPrev(self._items)

    def _performSearch(self):
        """
        Perform search.

        Retrieves list of matching items from *Data Settings* view and moves
        selection to the first found item starting from current item in view.
        """
        self._items = self._matched(self.filter(), self.context())
        self._highlight(self._items)
        self._restartTimer()
        if not self._checkCurrent(self._items):
            self._findNext(self._items)
        self._updateState()

    def _matched(self, pattern, context):
        """
        Get items matching given search criterion.

        Arguments:
            pattern (str): Search pattern.
            context (int): Search context (SearchContext).

        Returns:
            list[QTreeWidgetItem]: Matching items.
        """
        items = []
        if pattern and context is not None:
            items = self._view.find_items(pattern, context)
        return items

    def _highlight(self, items):
        """
        Highlight given items.

        Arguments:
            items (list[QTreeWidgetItem]): Items to highlight.
        """
        self._view.highlight(items)
        self._view.showChildIems(items)

    def _findNext(self, items):
        """
        Move forward among last found items.

        Arguments:
            items (list[QTreeWidgetItem]): Last matching items.
        """
        self._view.updateCurrent(items, True)
        self._restartTimer()

    def _findPrev(self, items):
        """
        Move backward among last found items.

        Arguments:
            items (list[QTreeWidgetItem]): Last matching items.
        """
        self._view.updateCurrent(items, False)
        self._restartTimer()

    def _checkCurrent(self, items):
        """
        Check if last found items contain current item.

        Arguments:
            items (list[QTreeWidgetItem]): Last matching items.
        """
        cur = self._view.currentItem()
        return cur is not None and cur in items

    def _updateState(self):
        """
        Update searcher controls.
        """
        self._filter.setValidState(len(self.filter()) == 0 or \
                                       len(self._items))
        self._prev.setEnabled(len(self._items) > 1)
        self._next.setEnabled(len(self._items) > 1)
