# -*- coding: utf-8 -*-

# Copyright 2016 EDF R&D
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License Version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, you may download a copy of license
# from https://www.gnu.org/licenses/gpl-3.0.

"""
Validity report dialog
----------------------

The module implements a dialog for validity report.

"""


from collections import namedtuple

from PyQt5 import Qt as Q

from . import Context, Role, is_noname
from ..common import load_pixmap, translate
from ..datamodel.command import Comment
from ..datamodel.general import Validity
from .datasettings.model import get_object_name, get_object_type
from .widgets import Dialog

# note: the following pragma is added to prevent pylint complaining
#       about functions that follow Qt naming conventions;
#       it should go after all global functions
# pragma pylint: disable=invalid-name


class ValidityReportDialog(Dialog):
    """Validity report dialog."""

    def __init__(self, astergui, obj, parent=None):
        """
        Create dialog.

        Arguments:
            astergui (AsterGui): Parent AsterGui instance.
            obj (Stage, Case): Stage or Case object.
            parent (Optional[QWidget]): Parent widget. Defaults to *None*.
        """
        super().__init__(parent)

        self._astergui = astergui

        # Main parameters
        title = translate("ValidityReportDialog",
                          "Validity report for {}").format(obj.name)
        self.setWindowTitle(title)
        self.setModal(True)

        # List of stages
        self._list = Q.QListWidget(self.main())
        self._list.setSelectionMode(Q.QAbstractItemView.SingleSelection)
        self._list.setMinimumWidth(100)
        stages = obj.stages if hasattr(obj, 'stages') else [obj]
        for stage in stages:
            item = Q.QListWidgetItem(stage.name)
            item.setData(Role.IdRole, stage.uid)
            self._list.addItem(item)
        self._list.setVisible(hasattr(obj, 'stages'))

        # Table of commands
        self._table = Q.QTableWidget(self.main())
        self._table.setEditTriggers(Q.QAbstractItemView.NoEditTriggers)
        self._table.setSelectionBehavior(Q.QAbstractItemView.SelectRows)
        self._table.verticalHeader().hide()

        # 'Show valid commands' check
        self._check = Q.QCheckBox(translate("ValidityReportDialog",
                                            "Show valid commands"),
                                  self.main())
        self._check.setChecked(True)

        # Buttons
        self.setStandardButtons(Q.QDialogButtonBox.Close)

        # Layout
        vlayout = Q.QVBoxLayout(self.main())
        vlayout.setContentsMargins(0, 0, 0, 0)
        layout = Q.QHBoxLayout()
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(5)
        layout.addWidget(self._list)
        layout.addWidget(self._table)
        layout.setStretch(1, 10)
        vlayout.addLayout(layout)
        vlayout.addWidget(self._check)

        # Connections
        self._list.itemSelectionChanged.connect(self.updateContent)
        self._table.cellDoubleClicked.connect(self.cellDoubleClicked)
        self._check.toggled.connect(self.showValidCommands)
        self.button(Q.QDialogButtonBox.Close).clicked.connect(self.close)

        # Initialization
        self.resize(800, 500)
        if self._list.count():
            self._list.item(0).setSelected(True)

    def updateContent(self):
        """Update table content for selected stage."""
        self._table.clear()
        if len(self._list.selectedItems()) != 1:
            return

        uid = self._list.selectedItems()[0].data(Role.IdRole)
        stage = self._astergui.study().history.get_node(uid)

        validity_data = namedtuple('validity_data', 'index value title')
        ValidityData = [
            validity_data(1, Validity.Syntaxic, translate("ValidityReportDialog", "Syntaxic")),
            validity_data(2, Validity.Dependency, translate("ValidityReportDialog", "Dependency")),
            validity_data(3, Validity.Naming, translate("ValidityReportDialog", "Naming")),
            ]
        pixmaps = {}
        pixmaps[True] = load_pixmap("as_pic_ok.png", size=16)
        pixmaps[False] = load_pixmap("as_pic_ko.png", size=16)

        headerLabels = []
        headerLabels.append(translate("ValidityReportDialog", "Concept"))
        for data in ValidityData:
            headerLabels.append(data.title)
        headerLabels.append(translate("ValidityReportDialog", "Used"))
        self._table.setColumnCount(len(headerLabels))
        self._table.setHorizontalHeaderLabels(headerLabels)

        self._table.horizontalHeader().setSectionResizeMode(0, Q.QHeaderView.Stretch)
        for data in ValidityData:
            self._table.setColumnWidth(data.index, 100)

        commands = [i for i in stage.sorted_commands if not isinstance(i, Comment)]
        self._table.setRowCount(len(commands))
        for row, command in enumerate(commands):
            self._table.setRowHeight(row, 20)
            command_name = ""
            try:
                command_name = get_object_name(command)
                command_type = get_object_type(command)
                if command_type:
                    command_name += " ({})".format(command_type)
            except RuntimeError:
                # for batch mode
                command_name = command.name

            item = Q.QTableWidgetItem()
            item.setText(command_name)
            item.setData(Role.IdRole, command.uid)
            self._table.setItem(row, 0, item)

            check = command.check()

            for data in ValidityData:
                ok = not bool(check & data.value)
                item = Q.QTableWidgetItem()
                item.setData(Role.ValidityRole, ok)
                self._table.setItem(row, data.index, item)
                label = Q.QLabel()
                label.setAlignment(Q.Qt.AlignCenter)
                label.setPixmap(pixmaps[ok])
                self._table.setCellWidget(row, data.index, label)

            ok = is_noname(command) or command.nb_children > 0
            item = Q.QTableWidgetItem()
            self._table.setItem(row, self._table.columnCount()-1, item)
            label = Q.QLabel()
            label.setAlignment(Q.Qt.AlignCenter)
            label.setPixmap(pixmaps[ok])
            self._table.setCellWidget(row, self._table.columnCount()-1, label)

        self.showValidCommands(self._check.checkState() == Q.Qt.Checked)

    @Q.pyqtSlot(int, int)
    def cellDoubleClicked(self, row, _):
        """
        Slot called when the table cell is double clicked.

        Arguments:
            row (int): Table row.
            column (int): Table column.
        """
        if row < 0 or row >= self._table.rowCount():
            return

        uid = self._table.item(row, 0).data(Role.IdRole)
        command = self._astergui.study().history.get_node(uid)
        if command is not None:
            self._astergui.update(autoSelect=command,
                                  context=Context.DataSettings)
        self.close()

    @Q.pyqtSlot(bool)
    def showValidCommands(self, state):
        """
        Slot called when the option 'Show valid commands' is toggled on/off.

        Arguments:
            state (bool): Toggle state.
        """
        for row in range(self._table.rowCount()):
            isHidden = False
            if not state:
                isOk = True
                for column in range(0, self._table.columnCount()):
                    validity = self._table.item(row, column).data(Role.ValidityRole)
                    if validity is None:
                        continue
                    isOk &= self._table.item(row, column).data(Role.ValidityRole)
                isHidden = isOk
            self._table.setRowHidden(row, isHidden)
