# -*- coding: utf-8 -*-

# Copyright 2016-2017 EDF R&D
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License Version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, you may download a copy of license
# from https://www.gnu.org/licenses/gpl-3.0.

"""
Information view
----------------

The module implements *Information* view for AsterStudy GUI.
See `InfoView` class for more details.

"""


from PyQt5 import Qt as Q

from .. import NodeType, Panel, get_node_type
from ..cmdtexteditor import CmdTextEditor
from ..parameterpanel import ParameterPanel
from ..widgets import TitleWidget
from ...common import (bold, change_cursor, connect, italic, load_icon, no_new_attributes,
                       translate)
from ...datamodel import CATA
from ...datamodel.study2comm import ExportToCommVisitor

__all__ = ["InfoView"]

# note: the following pragma is added to prevent pylint complaining
#       about functions that follow Qt naming conventions;
#       it should go after all global functions
# pragma pylint: disable=invalid-name


class Buttons:
    """Enumerator for panel's buttons."""

    Edit = 0
    EditText = 1
    Groups = 2
    Summary = 3

class InfoView(Q.QWidget):
    """
    Information view.
    """

    def __init__(self, astergui, parent=None):
        """
        Create view.

        Arguments:
            astergui (AsterGui): *AsterGui* instance.
            parent (Optional[QWidget]): Parent widget. Defaults to
                *None*.
        """
        super().__init__(parent)
        self.astergui = astergui
        self._objs = []
        self._actions = {}

        action = Q.QAction(translate("InfoView", "Edit"), self)
        action.setToolTip(translate("InfoView", "Edit"))
        action.setStatusTip(translate("InfoView", "Edit selected command"))
        action.setIcon(load_icon("as_pic_edit_command.png"))
        connect(action.triggered, self._edit)
        self._actions[Buttons.Edit] = action

        action = Q.QAction(translate("InfoView", "Edit Text"), self)
        action.setToolTip(translate("InfoView", "Edit text"))
        action.setStatusTip(translate("InfoView", "Edit selected command in text mode"))
        action.setIcon(load_icon("as_pic_edit_command_text.png"))
        connect(action.triggered, self._editText)
        self._actions[Buttons.EditText] = action

        action = Q.QAction(translate("AsterStudy", "Groups &Involved"), self)
        action.setToolTip(translate("AsterStudy", "Groups involved"))
        action.setStatusTip(translate("AsterStudy", "View mesh groups involved in the command"))
        action.setIcon(load_icon("as_pic_summary.png"))
        connect(action.triggered, self._groups)
        self._actions[Buttons.Groups] = action

        action = Q.QAction(translate("AsterStudy", "Analysis &Summary"), self)
        action.setToolTip(translate("AsterStudy", "Analysis summary"))
        action.setStatusTip(translate("AsterStudy", "Analysis summary"))
        action.setIcon(load_icon("as_pic_summary.png"))
        connect(action.triggered, self._summary)
        self._actions[Buttons.Summary] = action

        self.setLayout(Q.QVBoxLayout())
        self.layout().setContentsMargins(0, 0, 0, 0)
        self.layout().setSpacing(0)

        title = TitleWidget(translate("InfoView", "Information"), self)
        title.toolbar().addAction(self._actions[Buttons.Edit])
        title.toolbar().addAction(self._actions[Buttons.EditText])
        title.toolbar().addAction(self._actions[Buttons.Groups])
        title.toolbar().addAction(self._actions[Buttons.Summary])
        self.layout().addWidget(title)

        self.view = Q.QTextEdit(self)
        self.layout().addWidget(self.view)

        self.view.setObjectName("information_view")
        self.view.setReadOnly(True)

    def setSelection(self, objs):
        """
        Update information when selection is changed.
        """
        self._objs = objs
        self.update()

    def update(self):
        """
        Update the current information.
        """
        selected = self._objs
        is_cmd = False
        is_analysis = False
        if len(selected) > 1:
            text = translate("InfoView", "{} items selected")
            self.setText(text.format(len(selected)))
        elif selected:
            node = self.astergui.study().node(selected[0]) \
                if self.astergui.study() is not None else None
            is_cmd = get_node_type(node) == NodeType.Command
            if is_cmd:
                is_analysis = CATA.get_command_category(node.title) in ("Analysis",)
            self.setText(info(node))
        else:
            self.clear()
        is_current = self.astergui.study().isCurrentCase()
        param_panel_shown = isinstance(self.astergui.workSpace().panel(Panel.Edit).editor(),
                                       ParameterPanel)
        self._actions[Buttons.Edit].setVisible(is_cmd and is_current)
        self._actions[Buttons.EditText].setVisible(is_cmd and is_current)
        self._actions[Buttons.Groups].setVisible(is_cmd and not is_analysis \
                                                     and not param_panel_shown)
        self._actions[Buttons.Summary].setVisible(is_cmd and is_analysis \
                                                      and not param_panel_shown)

    def setText(self, text):
        """
        Set text to view.

        Arguments:
            text (str): Text data.
        """
        self.view.setText(text)
        debug_widget = getattr(self.astergui, 'debug_widget', None)
        if debug_widget is not None:
            debug_widget.setText(text)

    def text(self):
        """
        Get text from view.

        Note:
            Contents of view is returned as plain text, all HTML tags
            are lost.

        Returns:
            str: Text data.
        """
        return self.view.toPlainText()

    def clear(self):
        """Clear contents of view."""
        self.view.clear()

    def _edit(self):
        if self.astergui.prepare_for_new_operation():
            command = self.astergui.study().node(self._objs[0])
            editor = ParameterPanel(self.astergui)
            editor.setCommand(command)
            self.astergui.workSpace().panel(Panel.Edit).setEditor(editor)

    def _editText(self):
        if self.astergui.prepare_for_new_operation():
            command = self.astergui.study().node(self._objs[0])
            editor = CmdTextEditor(command, self.astergui)
            self.astergui.workSpace().panel(Panel.Edit).setEditor(editor)

    def _groups(self):
        node = self.astergui.study().node(self._objs[0])
        self.astergui.workSpace().panel(Panel.View).showInfo(command=node)

    def _summary(self):
        node = self.astergui.study().node(self._objs[0])
        self.astergui.workSpace().panel(Panel.View).showInfo(command=node, is_analysis=True)

# pragma pylint: disable=no-self-use

class Visitor(ExportToCommVisitor):
    """Custom visitor introducing pretty decoration of command.

    Output is limited to the first occurrences.
    """
    Indent = '&nbsp;&nbsp;'

    _level = _something = None
    __setattr__ = no_new_attributes(object.__setattr__)

    def __init__(self, *args):
        """Create visitor."""
        super().__init__(support=None, *args, limit=20)
        self._level = 0
        self._something = []

    def decorate_name(self, text):
        """Redefined from *ExportToCommVisitor*."""
        return italic(text)

    def decorate_title(self, text):
        """Redefined from *ExportToCommVisitor*."""
        return bold(text)

    def decorate_keyword(self, text):
        """Redefined from *ExportToCommVisitor*."""
        self._something[-1] = True
        return '<br>' + Visitor.Indent * self._level + bold(text)

    def decorate_comment(self, text):
        """Redefined from *ExportToCommVisitor*."""
        return italic(text)

    def decorate_special(self, text):
        """Redefined from *ExportToCommVisitor*."""
        return bold(text)

    def _newline(self):
        """Initialize a new line."""
        self._endline()
        self.curline.append(" " * self.indent[-1])

    @staticmethod
    @change_cursor
    def dump(node):
        """Dump command to pretty string representation."""
        visitor = Visitor()
        node.accept(visitor)
        visitor.end()
        value = visitor.clean(visitor.get_text())
        return value

    def _print_left_brace(self):
        """Redefined from *ExportToCommVisitor*."""
        super()._print_left_brace()
        self._begin_block()

    def _print_right_brace(self):
        """Redefined from *ExportToCommVisitor*."""
        self._end_block()
        super()._print_right_brace()

    def _begin_block(self):
        """Begin block."""
        self._level = self._level + 1
        self._something.append(False)

    def _end_block(self):
        """End block."""
        self._level = self._level - 1
        something = self._something.pop()
        if something:
            self._write('<br>' + Visitor.Indent * self._level)


def info(node):
    """
    Get pretty formatted preview information on the data model node.

    Arguments:
    node (Node): Data model object.

    Returns:
    str: Object's description.
    """
    node_type = get_node_type(node)
    return (Visitor.dump(node)
            if node_type in (NodeType.Command, NodeType.Variable) else "")
