# -*- coding: utf-8 -*-

# Copyright 2016 EDF R&D
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License Version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, you may download a copy of license
# from https://www.gnu.org/licenses/gpl-3.0.

"""
ASTERSTUDY module: SALOME wrapping for AsterStudy application.

SALOME GUI
----------

Implementation of ASTERSTUDY SALOME GUI - a wrapper for AsterStudy
application.

"""


import os

import PyQt5.Qt as Q

from ..common import (FilesSupplier, MeshElemType, common_filters,
                      debug_message, enable_except_hook,
                      external_files_callback, get_base_name, get_file_name,
                      info_message, is_medfile, translate)
from . import Context, NodeType, Panel, WorkingMode, check_selection, str2font
from .astergui import AsterGui
from .behavior import behavior
from .controller import Controller
from .meshview import MeshBaseView, MeshView, elem2smesh
from .parameterpanel.panel import ParameterPanel
from .parameterpanel.windows import ParameterMeshGroupWindow
from .prefmanager import tab_position
from .remotefs import MountWorker
from .salomegui_utils import get_salome_gui, get_salome_pyqt
from .study import Study, study_extension
from .widgets import PopupFrame


def get_aster_view_type():
    """
    Get Aster workspace view type name.

    Returns:
        string: AsterStudy workspace's type name
    """
    return 'AsterWorkspace'

class MeshObjects(FilesSupplier):
    """Provides access to SMESH Mesh data."""
    # pragma pylint: disable=no-member

    def files(self, file_format=None):
        """
        Redefined from FilesSupplier.
        Get list of SMESH Mesh objects.
        """
        # pragma pylint: disable=import-error,protected-access
        files = []
        if file_format is None or file_format in ('MED',):
            try:
                import salome
                import SMESH
                smesh = salome.myStudy.FindComponent('SMESH')
                if smesh:
                    iterator = salome.myStudy.NewChildIterator(smesh)
                    while iterator.More():
                        sobj = iterator.Value()
                        obj = sobj.GetObject()
                        uid = sobj.GetID()
                        if isinstance(obj, SMESH._objref_SMESH_Mesh):
                            files.append(uid)
                        iterator.Next()
            except (AttributeError, ImportError):
                pass
        return files

    def filename(self, uid):
        """
        Redefined from FilesSupplier.
        Get name of SMESH Mesh object by entry specified with *uid*.
        """
        # pragma pylint: disable=import-error
        try:
            import salome
            sobj = salome.myStudy.FindObjectID(uid)
            if sobj and sobj.GetAllAttributes():
                return sobj.GetName()
        except (ImportError, AttributeError):
            pass
        return None

    def groups(self, uid, group_type):
        """
        Redefined from FilesSupplier.
        Get names of groups for given SMESH Mesh object.
        """
        # pragma pylint: disable=import-error,protected-access
        groups = []
        try:
            import salome
            import SMESH
            sobj = salome.myStudy.FindObjectID(uid)
            if sobj and sobj.GetAllAttributes():
                mesh = sobj.GetObject()
                if mesh and isinstance(mesh, SMESH._objref_SMESH_Mesh):
                    stypes = MeshView.smesh_types(group_type)
                    groups = [i.GetName() for i in mesh.GetGroups() \
                                  if i.GetType() in stypes]
        except (ImportError, AttributeError):
            pass
        return groups

    def groups_by_type(self, uid, elem_type, with_size=False):
        """
        Redefined from FilesSupplier.
        Get names of groups for given SMESH Mesh object.
        """
        # pragma pylint: disable=import-error,protected-access
        groups = []
        try:
            import salome
            import SMESH
            from salome.smesh import smeshBuilder
            smesh = smeshBuilder.New()
            sobj = salome.myStudy.FindObjectID(uid)
            if elem_type in MeshElemType.list_elem_types() \
                    and sobj and sobj.GetAllAttributes():
                mesh = sobj.GetObject()
                if mesh and isinstance(mesh, SMESH._objref_SMESH_Mesh):
                    wobj = smesh.Mesh(mesh, sobj.GetName())
                    all_groups = mesh.GetGroups()
                    for group in all_groups:
                        if group.GetType() in elem2smesh(elem_type):
                            if with_size:
                                name = group.GetName()
                                occs = max(len(wobj.GetGroupByName(name, SMESH.ALL)) \
                                         - len(wobj.GetGroupByName(name, SMESH.NODE)), 1)
                                groups.append((name.rstrip(),
                                               group.Size(),
                                               occs))
                            else:
                                groups.append(group.GetName().rstrip())
        except (ImportError, AttributeError):
            pass
        return groups

    def export_to_med(self, uid, filepath):
        """
        Export the MESH object with entry `uid` to `filepath`.

        Arguments:
            uid (str): entry of the object
            filepath (str): path where to export it as a file
        """
        # pragma pylint: disable=import-error,no-name-in-module,protected-access
        try:
            import salome
            from salome.smesh import smeshBuilder
            sobj = salome.myStudy.FindObjectID(uid)
            smesh = smeshBuilder.New()
            import SMESH
            corba_obj = sobj.GetObject()
            assert isinstance(corba_obj, SMESH._objref_SMESH_Mesh)
            mesh_obj = smesh.Mesh(corba_obj, sobj.GetName())
            mesh_obj.ExportMED(filepath, 0)
        except (ImportError, AttributeError):
            pass

external_files_callback(MeshObjects(), True)


def enable_salome_actions(enable):
    """
    Show / hide unnecessary SALOME actions

    Note:
        This is a workaround until SALOME GUI is not improved to provide
        better way to do this.
    """
    import SalomePyQt
    menu = get_salome_pyqt().getPopupMenu(SalomePyQt.Edit)
    for action in menu.actions():
        action.setVisible(enable)

# note: the following pragma is added to prevent pylint complaining
#       about functions that follow Qt naming conventions;
#       it should go after all global functions
# pragma pylint: disable=invalid-name


class SalomePreferencesMgr:
    """A wrapper for preference management in SALOME."""

    # pragma pylint: disable=no-self-use
    def value(self, key, default=None):
        """
        Get preference option's value.

        Arguments:
            key (str): Option's name.
            default (Optional[str]). Default value for the option.
                Defaults to *None*.

        Returns:
            str: Option's value.
        """
        section, parameter = self._splitKey(key)
        value = get_salome_pyqt().stringSetting(section, parameter, default, True)
        if value.startswith("@ByteArray"):
            try:
                value = get_salome_pyqt().byteArraySetting(section, parameter)
            except AttributeError:
                info_message(translate("PrefDlg", "WARNING: can not yet "
                                       "restore setting {0}.".format(key)))
        return value

    # pragma pylint: disable=no-self-use
    def int_value(self, key, default=0):
        """
        Get preference option's value as an integer.

        Arguments:
            key (str): Option's name.
            default (Optional[int]). Default value for the option.
                Defaults to 0.

        Returns:
            int: Option's value.
        """
        section, parameter = self._splitKey(key)
        return get_salome_pyqt().integerSetting(section, parameter, default)

    # pragma pylint: disable=no-self-use
    def float_value(self, key, default=.0):
        """
        Get preference option's value as a float.

        Arguments:
            key (str): Option's name.
            default (Optional[float]). Default value for the option.
                Defaults to 0.0.

        Returns:
            float: Option's value.
        """
        section, parameter = self._splitKey(key)
        return get_salome_pyqt().doubleSetting(section, parameter, default)

    # pragma pylint: disable=no-self-use
    def bool_value(self, key, default=False):
        """
        Get preference option's value as a boolean.

        Arguments:
            key (str): Option's name.
            default (Optional[bool]). Default value for the option.
                Defaults to *False*.

        Returns:
            bool: Option's value.
        """
        section, parameter = self._splitKey(key)
        return get_salome_pyqt().boolSetting(section, parameter, default)

    # pragma pylint: disable=no-self-use
    def str_value(self, key, default="", subst=True):
        """
        Get preference option's value as a string.

        Arguments:
            key (str): Option's name.
            default (Optional[str]). Default value for the option.
                Defaults to empty string.
            subst (Optional[bool]). Flag specifying if it's necessary to
                perform auto-substitution of variables. Defaults to
                *True*.

        Returns:
            str: Option's value.
        """
        section, parameter = self._splitKey(key)
        return get_salome_pyqt().stringSetting(section, parameter, default, subst)

    # pragma pylint: disable=no-self-use
    def font_value(self, key, default=Q.QFont()):
        """
        Get preference option's value as *QFont*.

        Arguments:
            key (str): Option's name.
            default (Optional[int]). Default value for the option.
                Defaults to null font.

        Returns:
            QFont: Option's value.
        """
        section, parameter = self._splitKey(key)
        try:
            return get_salome_pyqt().fontSetting(section, parameter, default)
        except AttributeError:
            text = get_salome_pyqt().stringSetting(section, parameter,
                                                   default.toString(), True)
            return str2font(text)

    # pragma pylint: disable=no-self-use
    def color_value(self, key, default=Q.QColor()):
        """
        Get preference option's value as *QColor*.

        Arguments:
            key (str): Option's name.
            default (Optional[int]). Default value for the option.
                Defaults to null color.

        Returns:
            QColor: Option's value.
        """
        section, parameter = self._splitKey(key)
        return get_salome_pyqt().colorSetting(section, parameter, default)

    # pragma pylint: disable=no-self-use
    def setValue(self, key, value):
        """
        Set preference option's value.

        Arguments:
            key (str): Option's name.
            value (any). Option's value.
        """
        section, parameter = self._splitKey(key)
        get_salome_pyqt().addSetting(section, parameter, value)

    # pragma pylint: disable=no-self-use
    def contains(self, key):
        """
        Check if option is known by preference manager.

        Arguments:
            key (str): Option's name.

        Returns:
            bool: *True* if this is a known option; *False* otherwise.
        """
        section, parameter = self._splitKey(key)
        return get_salome_pyqt().hasSetting(section, parameter)

    def _splitKey(self, key):
        """
        Split option to section and key components.

        For example, _splitKey('aaa/bbb') will return ('aaa', 'bbb').

        If section is not given, it defaults to name of the module.

        Arguments:
            key (str): Option's name.

        Returns:
            (str, str): Section and key components of option.
        """
        separator = '/'
        section, parameter = '', key
        if separator in key:
            index = key.index(separator)
            section, parameter = key[:index], key[index+1:]
        return section if section else AsterSalomeGui.NAME, parameter


class AsterSalomeGui(AsterGui):
    """ASTERSTUDY SALOME module GUI."""

    NAME = 'ASTERSTUDY'
    _prefMgr = None

    def __init__(self):
        """Create GUI instance."""
        AsterGui.__init__(self)
        self._loader = None

    # pragma pylint: disable=no-self-use
    def createMenu(self, text, parent=-1, group=-1):
        """
        Create menu item in the main menu of application.

        Menu item is specified by its label. If there is already a menu
        with given text, its identifier is returned.

        Parent menu is specified via the identifier; -1 means top-level
        menu.

        Menu items are combined into groups; -1 means most bottom (last)
        group.

        Arguments:
            text (str): Text label of menu item.
            parent (Optional[int]): Parent menu item. Defaults to -1.
            group (Optional[int]): Menu group. Defaults to -1.

        Returns:
            int: Menu item's unique identifier.

        Raises:
            RuntimeError: If parent menu was not found.

        See also:
            `addMenuAction()`
        """
        return get_salome_pyqt().createMenu(text, parent, -1, group)

    # pragma pylint: disable=no-self-use
    def addMenuAction(self, action, parent, group=-1):
        """
        Add action to the menu.

        Similarly to menu items, actions are combined into groups;
        see `createMenu()` for more details.

        Arguments:
            action (QAction): Menu action.
            parent (int): Parent menu item.
            group (Optional[int]): Menu group. Defaults to -1.

        Raises:
            RuntimeError: If parent menu was not found.

        See also:
            `createMenu()`
        """
        if action is None:
            action = get_salome_pyqt().createSeparator()
        get_salome_pyqt().createMenu(action, parent, -1, group)

    # pragma pylint: disable=no-self-use
    def createToolbar(self, text, name):
        """
        Create toolbar.

        Toolbar is specified by its label and name.
        Label normally is specified as a text translated to the current
        application's language, while name should not be translated - it
        is used to properly save and restore positions of toolbars.

        Arguments:
            text (str): Text label of toolbar.
            name (str): Unique name of toolbar.

        Returns:
            int: Toolbar's unique identifier.

        See also:
            `addToolbarAction()`
        """
        return get_salome_pyqt().createTool(text, name)

    # pragma pylint: disable=no-self-use
    def addToolbarAction(self, action, parent):
        """
        Add action to the toolbar.

        Arguments:
            action (QAction): Toolbar action.
            parent (int): Parent toolbar.

        Raises:
            RuntimeError: If parent toolbar was not found.

        See also:
            `createToolbar()`
        """
        if action is None:
            action = get_salome_pyqt().createSeparator()
        get_salome_pyqt().createTool(action, parent)

    @classmethod
    def preferencesMgr(cls):
        """
        Get preferences manager.

        Returns:
            object: Application's Preferences manager.
        """
        if cls._prefMgr is None:
            cls._prefMgr = SalomePreferencesMgr()
        return cls._prefMgr

    def createPreferences(self):
        """Export preferences to common Preferences dialog."""
        # pragma pylint: disable=too-many-statements

        import SalomePyQt
        def _addSpacing(_title, _gid):
            spacer = get_salome_pyqt().addPreference(_title, _gid, SalomePyQt.PT_Space)
            get_salome_pyqt().setPreferenceProperty(spacer, "hsize", 0)
            get_salome_pyqt().setPreferenceProperty(spacer, "vsize", 10)
            get_salome_pyqt().setPreferenceProperty(spacer, "hstretch", 0)
            get_salome_pyqt().setPreferenceProperty(spacer, "vstretch", 0)

        # 'General' page
        title = translate("PrefDlg", "General")
        gid = get_salome_pyqt().addPreference(title)

        # code_aster version
        title = translate("PrefDlg", "Version of code_aster")
        item = get_salome_pyqt().addPreference(title,
                                               gid,
                                               SalomePyQt.PT_Selector,
                                               AsterSalomeGui.NAME,
                                               "code_aster_version")
        values = []
        values.append(translate("PrefDlg", "Use default"))
        values.append(translate("PrefDlg", "Ask"))
        get_salome_pyqt().setPreferenceProperty(item, "strings", values)
        values = ["default", "ask"]
        get_salome_pyqt().setPreferenceProperty(item, "ids", values)

        # Add spacing
        _addSpacing("1", gid)

        # Workspace tab pages position
        title = translate("PrefDlg", "Workspace tab pages position")
        item = get_salome_pyqt().addPreference(title,
                                               gid,
                                               SalomePyQt.PT_Selector,
                                               AsterSalomeGui.NAME,
                                               "workspace_tab_position")
        values = []
        values.append(translate("PrefDlg", "North"))
        values.append(translate("PrefDlg", "South"))
        values.append(translate("PrefDlg", "West"))
        values.append(translate("PrefDlg", "East"))
        get_salome_pyqt().setPreferenceProperty(item, "strings", values)
        values = ["north", "south", "west", "east"]
        get_salome_pyqt().setPreferenceProperty(item, "ids", values)

        # Initial workspace view
        title = translate("PrefDlg", "Open workspace in")
        item = get_salome_pyqt().addPreference(title,
                                               gid,
                                               SalomePyQt.PT_Selector,
                                               AsterSalomeGui.NAME,
                                               "workspace_initial_view")
        values = []
        values.append(translate("PrefDlg", "History view"))
        values.append(translate("PrefDlg", "Case view"))
        get_salome_pyqt().setPreferenceProperty(item, "strings", values)
        values = [WorkingMode.value2pref(WorkingMode.HistoryMode),
                  WorkingMode.value2pref(WorkingMode.CaseMode)]
        get_salome_pyqt().setPreferenceProperty(item, "ids", values)

        # Add spacing
        _addSpacing("2", gid)

        # Strict import mode
        title = translate("PrefDlg", "Strict import mode")
        get_salome_pyqt().addPreference(title,
                                        gid,
                                        SalomePyQt.PT_Bool,
                                        AsterSalomeGui.NAME,
                                        "strict_import_mode")

        # Warn for number of lines
        title = translate("PrefDlg",
                          "Limit of number of lines for graphical mode")
        item = get_salome_pyqt().addPreference(title, gid,
                                               SalomePyQt.PT_IntSpin,
                                               AsterSalomeGui.NAME,
                                               "nblines_limit")
        get_salome_pyqt().setPreferenceProperty(item, "min", 1)
        get_salome_pyqt().setPreferenceProperty(item, "max", 100000)

        # Add spacing
        _addSpacing("3", gid)

        # Switch on/off Undo/Redo feature
        title = translate("PrefDlg", "Disable Undo/Redo feature")
        get_salome_pyqt().addPreference(title,
                                        gid,
                                        SalomePyQt.PT_Bool,
                                        AsterSalomeGui.NAME,
                                        "disable_undo_redo")

        _addSpacing("4", gid)

        # Use CodeAster native naming
        # (switch off business-oriented translation)
        title = translate("PrefDlg",
                          "Use business-oriented translations")
        get_salome_pyqt().addPreference(title,
                                        gid,
                                        SalomePyQt.PT_Bool,
                                        AsterSalomeGui.NAME,
                                        "use_business_translations")

        _addSpacing("5", gid)

        # Switch on/off connect remote servers
        title = translate("PrefDlg", "Connect remote servers at startup")
        get_salome_pyqt().addPreference(title,
                                        gid,
                                        SalomePyQt.PT_Bool,
                                        AsterSalomeGui.NAME,
                                        "connect_servers_init")

        _addSpacing("6", gid)

        # *** Documentation (group)
        title = translate("PrefDlg", "Documentation")
        sgid = get_salome_pyqt().addPreference(title, gid)

        # - Documentation url
        title = translate("PrefDlg", "Website")
        get_salome_pyqt().addPreference(title,
                                        sgid,
                                        SalomePyQt.PT_String,
                                        AsterSalomeGui.NAME,
                                        "doc_base_url")

        # - Documentation language
        title = translate("PrefDlg", "Language")
        item = get_salome_pyqt().addPreference(title,
                                               sgid,
                                               SalomePyQt.PT_Selector,
                                               AsterSalomeGui.NAME,
                                               "doc_language")
        values = []
        values.append(translate("PrefDlg", "Use application language"))
        values.append("English")
        values.append("Français")
        get_salome_pyqt().setPreferenceProperty(item, "strings", values)
        values = ["application", "en", "fr"]
        get_salome_pyqt().setPreferenceProperty(item, "ids", values)
        pref_mgr = self.preferencesMgr()
        res_dir = pref_mgr.value("resources/%s" % AsterSalomeGui.NAME)
        values = [None,
                  Q.QIcon(os.path.join(res_dir, "as_lang_en.png")),
                  Q.QIcon(os.path.join(res_dir, "as_lang_fr.png"))]
        get_salome_pyqt().setPreferenceProperty(item, "icons", values)

        # --- end of 'General' page

        # 'Interface' page
        title = translate("PrefDlg", "Interface")
        gid = get_salome_pyqt().addPreference(title)

        # *** Data Settings panel (group)
        title = translate("PrefDlg", "Data Settings panel")
        sgid = get_salome_pyqt().addPreference(title, gid)

        # Show categories in Data Settings panel
        title = translate("PrefDlg", "Show categories")
        get_salome_pyqt().addPreference(title,
                                        sgid,
                                        SalomePyQt.PT_Bool,
                                        AsterSalomeGui.NAME,
                                        "show_categories")

        # Show catalogue name in Data Settings panel
        title = translate("PrefDlg", "Show catalogue name")
        get_salome_pyqt().addPreference(title,
                                        sgid,
                                        SalomePyQt.PT_Bool,
                                        AsterSalomeGui.NAME,
                                        "show_catalogue_name")

        # Show comments in Data Settings panel
        title = translate("PrefDlg", "Show comments")
        get_salome_pyqt().addPreference(title,
                                        sgid,
                                        SalomePyQt.PT_Bool,
                                        AsterSalomeGui.NAME,
                                        "show_comments")

        # Auto-expand in Data Settings panel
        title = translate("PrefDlg", "Automatically expand items on import operations")
        get_salome_pyqt().addPreference(title,
                                        sgid,
                                        SalomePyQt.PT_Bool,
                                        AsterSalomeGui.NAME,
                                        "auto_expand")

        # Enable auto-hide feature for search tool in Data Settings panel
        title = translate("PrefDlg", "Auto-hide search panel")
        get_salome_pyqt().addPreference(title,
                                        sgid,
                                        SalomePyQt.PT_Bool,
                                        AsterSalomeGui.NAME,
                                        "auto_hide_search")

        # *** Data Files panel (group)
        title = translate("PrefDlg", "Data Files panel")
        sgid = get_salome_pyqt().addPreference(title, gid)

        # Sort stages in Data Files panel
        title = translate("PrefDlg", "Sort stages")
        get_salome_pyqt().addPreference(title,
                                        sgid,
                                        SalomePyQt.PT_Bool,
                                        AsterSalomeGui.NAME,
                                        "sort_stages")

        # Show catalogue name in Data Files panel
        title = translate("PrefDlg", "Show catalogue name")
        get_salome_pyqt().addPreference(title,
                                        sgid,
                                        SalomePyQt.PT_Bool,
                                        AsterSalomeGui.NAME,
                                        "show_catalogue_name_data_files")

        # Show related concepts in Data Files panel
        title = translate("PrefDlg", "Show related concepts")
        get_salome_pyqt().addPreference(title,
                                        sgid,
                                        SalomePyQt.PT_Bool,
                                        AsterSalomeGui.NAME,
                                        "show_related_concepts")

        # Join similar files in Data Files panel
        title = translate("PrefDlg", "Join similar data files")
        get_salome_pyqt().addPreference(title,
                                        sgid,
                                        SalomePyQt.PT_Bool,
                                        AsterSalomeGui.NAME,
                                        "join_similar_files")

        # *** Parameter panel (group)
        title = translate("PrefDlg", "Parameters panel")
        sgid = get_salome_pyqt().addPreference(title, gid)

        # Content label mode
        title = translate("PrefDlg", "Parameter content display mode")
        item = get_salome_pyqt().addPreference(title,
                                               sgid,
                                               SalomePyQt.PT_Selector,
                                               AsterSalomeGui.NAME,
                                               "content_mode")
        values = []
        values.append(translate("PrefDlg", "None"))
        values.append(translate("PrefDlg", "Parameters"))
        values.append(translate("PrefDlg", "Keywords"))
        values.append(translate("PrefDlg", "Values"))
        get_salome_pyqt().setPreferenceProperty(item, "strings", values)
        values = ["none", "parameters", "keywords", "values"]
        get_salome_pyqt().setPreferenceProperty(item, "ids", values)

        # Show tooltip for 'into' items
        title = translate("PrefDlg", "Show identifier for selector items")
        get_salome_pyqt().addPreference(title,
                                        sgid,
                                        SalomePyQt.PT_Bool,
                                        AsterSalomeGui.NAME,
                                        "show_selector_value")

        # Sort selector items in Parameters panel
        title = translate("PrefDlg", "Sort selector items")
        get_salome_pyqt().addPreference(title,
                                        sgid,
                                        SalomePyQt.PT_Bool,
                                        AsterSalomeGui.NAME,
                                        "sort_selector_values")

        # Show catalogue name for command selector items
        title = translate("PrefDlg",
                          "Show catalogue name in command selector items")
        get_salome_pyqt().addPreference(title,
                                        sgid,
                                        SalomePyQt.PT_Bool,
                                        AsterSalomeGui.NAME,
                                        "show_catalogue_name_in_selectors")

        # External list
        title = translate("PrefDlg", "Edit list-like keywords in sub-panel")
        get_salome_pyqt().addPreference(title,
                                        sgid,
                                        SalomePyQt.PT_Bool,
                                        AsterSalomeGui.NAME,
                                        "external_list")

        # *** Dashboard panel (group)
        title = translate("PrefDlg", "Dashboard")
        sgid = get_salome_pyqt().addPreference(title, gid)

        # External list
        title = translate("PrefDlg", "Toogle buttons for Reusable option")
        get_salome_pyqt().addPreference(title,
                                        sgid,
                                        SalomePyQt.PT_Bool,
                                        AsterSalomeGui.NAME,
                                        "reuse_buttons")

        # *** Summary panel (group)
        title = translate("PrefDlg", "Summary")
        sgid = get_salome_pyqt().addPreference(title, gid)

        title = translate("PrefDlg", "Number of groups in chunk")
        item = get_salome_pyqt().addPreference(title, sgid,
                                               SalomePyQt.PT_IntSpin,
                                               AsterSalomeGui.NAME,
                                               "summary_chunk")
        get_salome_pyqt().setPreferenceProperty(item, "min", 1)
        get_salome_pyqt().setPreferenceProperty(item, "max", 100)

        # Add spacing
        _addSpacing("7", gid)

        # *** Operations

        # Auto-edit command
        title = translate("PrefDlg", "Automatically activate command edition")
        get_salome_pyqt().addPreference(title,
                                        gid,
                                        SalomePyQt.PT_Bool,
                                        AsterSalomeGui.NAME,
                                        "auto_edit")

        # Add spacing
        _addSpacing("8", gid)

        # *** Windows

        # Show read-only banner
        title = translate("PrefDlg", "Show read-only banner")
        get_salome_pyqt().addPreference(title,
                                        gid,
                                        SalomePyQt.PT_Bool,
                                        AsterSalomeGui.NAME,
                                        "show_readonly_banner")

        # Add spacing
        _addSpacing("9", gid)

        # *** Other features

        # Allow delete case used by other case(s)
        title = translate("PrefDlg",
                          "Allow deleting cases used by other case(s)")
        get_salome_pyqt().addPreference(title,
                                        gid,
                                        SalomePyQt.PT_Bool,
                                        AsterSalomeGui.NAME,
                                        "allow_delete_cases")

        # --- end of 'Interface' page

        # 'Editor' page
        title = translate("PrefDlg", "Editor")
        gid = get_salome_pyqt().addPreference(title)

        # - External editor
        title = translate("PrefDlg", "External editor")
        get_salome_pyqt().addPreference(title,
                                        gid,
                                        SalomePyQt.PT_File,
                                        AsterSalomeGui.NAME,
                                        "external_editor")

        # Add spacing
        _addSpacing("10", gid)

        # Use external editor for text stage
        title = translate("PrefDlg",
                          "Use external editor for text stage edition")
        get_salome_pyqt().addPreference(title, gid,
                                        SalomePyQt.PT_Bool,
                                        AsterSalomeGui.NAME,
                                        "use_external_editor_stage")

        # Use external editor for data files edition
        title = translate("PrefDlg",
                          "Use external editor for data files edition")
        get_salome_pyqt().addPreference(title, gid,
                                        SalomePyQt.PT_Bool,
                                        AsterSalomeGui.NAME,
                                        "use_external_editor_data_file")

        # Use external editor for message files viewing
        title = translate("PrefDlg",
                          "Use external editor for message files viewing")
        get_salome_pyqt().addPreference(title, gid,
                                        SalomePyQt.PT_Bool,
                                        AsterSalomeGui.NAME,
                                        "use_external_editor_msg_file")

        # Add spacing
        _addSpacing("11", gid)

        # Warn for file's size limit
        title = translate("PrefDlg", "Warn when viewing file larger than")
        item = get_salome_pyqt().addPreference(title, gid,
                                               SalomePyQt.PT_IntSpin,
                                               AsterSalomeGui.NAME,
                                               "file_size_limit")
        get_salome_pyqt().setPreferenceProperty(item, "min", 1)
        get_salome_pyqt().setPreferenceProperty(item, "max", 100000)
        get_salome_pyqt().setPreferenceProperty(item, "suffix", " KB")

        # --- end of 'Editor' page

        # 'Confirmations' page
        title = translate("PrefDlg", "Confirmations")
        gid = get_salome_pyqt().addPreference(title)

        # - Delete object
        title = translate("PrefDlg", "Delete object")
        get_salome_pyqt().addPreference(title,
                                        gid,
                                        SalomePyQt.PT_Bool,
                                        AsterSalomeGui.NAME,
                                        "msgbox_delete")

        # - Undefined files
        title = translate("PrefDlg", "Undefined files")
        get_salome_pyqt().addPreference(title,
                                        gid,
                                        SalomePyQt.PT_Bool,
                                        AsterSalomeGui.NAME,
                                        "msgbox_undefined_files")

        # - Delete case used by other case(s)
        title = translate("PrefDlg", "Delete case used by other case(s)")
        get_salome_pyqt().addPreference(title,
                                        gid,
                                        SalomePyQt.PT_Bool,
                                        AsterSalomeGui.NAME,
                                        "msgbox_delete_case")

        # - Delete child stages
        title = translate("PrefDlg", "Delete child stages")
        get_salome_pyqt().addPreference(title,
                                        gid,
                                        SalomePyQt.PT_Bool,
                                        AsterSalomeGui.NAME,
                                        "msgbox_delete_stages")

        # - Convert invalid graphical stage
        title = translate("PrefDlg", "Convert invalid graphical stage")
        get_salome_pyqt().addPreference(title,
                                        gid,
                                        SalomePyQt.PT_Bool,
                                        AsterSalomeGui.NAME,
                                        "msgbox_convert_invalid_graphic_stage")

        # - Close the parameter panel
        title = translate("PrefDlg", "Close parameter panel "
                          "with modifications")
        get_salome_pyqt().addPreference(title,
                                        gid,
                                        SalomePyQt.PT_Bool,
                                        AsterSalomeGui.NAME,
                                        "msgbox_parampanel_close")

        # - Abort the parameter panel
        title = translate("PrefDlg", "Abort command edition")
        get_salome_pyqt().addPreference(title,
                                        gid,
                                        SalomePyQt.PT_Bool,
                                        AsterSalomeGui.NAME,
                                        "msgbox_parampanel_abort")

        # --- end of 'Confirmations' page

        if hasattr(SalomePyQt, 'UserDefinedContent'):
            from .widgets.dirwidget import DirWidget

            # 'Catalogs' page
            title = translate("PrefDlg", "Catalogs")
            gid = get_salome_pyqt().addPreference(title)

            # User's catalogs
            title = translate("PrefDlg", "User's catalogs")
            sgid = get_salome_pyqt().addPreference(title, gid)
            item = get_salome_pyqt().addPreference('',
                                                   sgid,
                                                   SalomePyQt.PT_UserDefined,
                                                   AsterSalomeGui.NAME,
                                                   "user_catalogs")
            widget = DirWidget.instance()
            get_salome_pyqt().setPreferencePropertyWg(item, "content", widget)

            # --- end of 'Catalogs' page

    def preferenceChanged(self, section, name):
        """
        Called when preferences item is changed in Preferences dialog.

        Arguments:
            section (str): Resource section's name.
            name (str): Resource parameter's name.
        """
        has_changes = False

        if section == AsterSalomeGui.NAME:
            has_changes = True
            self.from_preferences() # re-initialize behavior from preferences
            if name == "workspace_tab_position":
                if self.work_space is not None:
                    tbposition = behavior().workspace_tab_position
                    self.work_space.setTabPosition(tab_position(tbposition))
            elif name in ("use_business_translations", "content_mode"):
                self.updateTranslations()
            elif name == "sort_stages":
                self.workSpace().view(Context.DataFiles).resort()
            elif name in ("show_related_concepts", "join_similar_files"):
                self.workSpace().view(Context.DataFiles).update()
            elif name in ("show_catalogue_name", "show_comments",
                          "show_categories"):
                self.workSpace().view(Context.DataSettings).update()
            elif name in ("show_catalogue_name_data_files",):
                self.workSpace().view(Context.DataFiles).update()
            elif name == "auto_hide_search":
                view = self.workSpace().view(Context.DataSettings)
                view.setAutoHideSearch(behavior().auto_hide_search)
            elif name == "show_readonly_banner":
                self._updateWindows()
            elif name == "summary_chunk":
                self.workSpace().panel(Panel.View).updateInfo()

        elif section == "PyEditor":
            has_changes = True

        if has_changes:
            self.preferencesChanged.emit(self.preferencesMgr())

    def showNotification(self, text, timeout=-1):
        """Reimplemented from AsterGui."""
        spq = get_salome_pyqt()
        return spq.showNotification(text, "AsterStudy", timeout) \
            if hasattr(spq, 'showNotification') else -1

    def hideNotification(self, textorid):
        """Reimplemented from AsterGui."""
        spq = get_salome_pyqt()
        if hasattr(spq, 'hideNotification'):
            spq.hideNotification(textorid)

    def activate(self):
        """Activate AsterStudy GUI."""
        info_message("AsterStudy is activating...")
        # if not hasattr(self, 'ptvsd'): # uncomment to wait for connection
        #     self.ptvsd = 1
        #     import ptvsd
        #     print('Waiting for debugger attach...'),
        #     ptvsd.enable_attach(address=('127.0.0.1', 3000))
        #     ptvsd.wait_for_attach()
        #     ptvsd.break_into_debugger()

        if int(os.getenv("ASTER_NO_EXCEPTHANDLER", "0")) == 0:
            enable_except_hook(True)
        enable_salome_actions(False)
        view = get_salome_pyqt().findViews(get_aster_view_type())
        if view:
            get_salome_pyqt().setViewVisible(view[0], True)
        else:
            info_message("Creating workspace...")
            self.work_space = self._createWorkspace(self.main_window)
            info_message("workspace is ready.")
            view = get_salome_pyqt().createView(get_aster_view_type(), self.work_space)
            get_salome_pyqt().setViewClosable(view, False)
            get_salome_pyqt().setViewTitle(view, translate("AsterStudy", "Aster workspace"))

        reactivate = False
        if self.study() is None:
            chosen_version = self.chooseVersion()
            if not chosen_version:
                return False
            self._setStudy(Study(self, version=chosen_version))
            reactivate = True
        self._loader = BackgroundLoading(self.main_window)
        self._loader.start()

        self._connectWorkspace()

        self.work_space.activate(True)
        if hasattr(get_salome_pyqt(), "createRoot"):
            get_salome_pyqt().createRoot()
        else:
            children = get_salome_pyqt().getChildren()
            if not children:
                get_salome_pyqt().createObject()
        self.update()

        # results tab, initialize pv view if needed
        results = self.workSpace().view(Context.Results)
        if results.current:
            results.load_med_result_call(
                results.current.path, full_load_pv=False)
        else:
            self.workSpace().main.setTabEnabled(WorkingMode.ResultsMode, False)

        # no RunCase: select Case mode
        self.work_space.panels[Panel.View].activate()
        if self.study().history.nb_cases > 1:
            working_mode = WorkingMode.HistoryMode
        else:
            working_mode = WorkingMode.CaseMode
        # new study: select prefered mode
        if reactivate:
            view = behavior().workspace_initial_view
            working_mode = WorkingMode.pref2value(view)
        self.workSpace().setWorkingMode(working_mode)

        self._loader.terminate()
        get_salome_pyqt().enableSelector()
        info_message("AsterStudy activated")
        return True

    def deactivate(self):
        """Deactivate AsterStudy GUI."""

        # If ParaView view is initialized in Asterstudy workspace,
        # move it back to the SALOME workspace
        if self.work_space:
            results = self.work_space.view(Context.Results)
            if results.pv_view:
                results.detach(keep_pipeline=True)
                self.work_space.setWorkingMode(WorkingMode.CaseMode)

        if self.work_space:
            self.work_space.panels[Panel.View].deactivate()
            self.work_space.activate(False)
        view = get_salome_pyqt().findViews(get_aster_view_type())
        if view:
            get_salome_pyqt().setViewVisible(view[0], False)
        if int(os.getenv("ASTER_NO_EXCEPTHANDLER", "0")) == 0:
            enable_except_hook(False)
        enable_salome_actions(True)
        get_salome_pyqt().disableSelector()

    def save(self, directory, url):
        """
        Save module data to files; returns file names.

        The function saves the module data to the files in a temporary
        directory specified as a parameter and returns names if files in
        which module data is saved.

        Arguments:
            directory (str): A directory to store data files. Note: this
                can be not a final study destination folder but a
                temporary directly, depending on used save mode
                (single-file or multi-file).

            url (str): Actual study URL (the final study destination).
                Note: this parameter is provided for information
                purposes only! Depending on version of SALOME being used
                this parameter may be empty!

        Returns:
            list[str]: names of files in which data is saved
        """
        if not self.study(): # if activation aborted
            return []
        try:
            study_name = get_salome_pyqt().getStudyName() + "_"
        except AttributeError:
            study_name = get_base_name(url, False) + "_" if url else ""
        ajs = "{}asterstudy.{}".format(study_name, study_extension())
        path = os.path.join(directory, ajs)
        debug_message("salomegui.save(): ajs: {0}, url: {1}".format(ajs, url))
        renamed = self.study().url() and self.study().url() != url
        self.study().set_url(url)
        try:
            self.study().saveAs(path, renamed)
        except IOError:
            ajs = ""
        self.update()
        files = [ajs]
        files.extend(self.study().history.save_embedded_files(directory))
        return files

    def load(self, files, url):
        """
        Load data from the files; return result status.

        The function restores module data from the files specified as a
        parameter; returns *True* in case of success or *False*
        otherwise.

        Arguments:
            files (list[str]): Data files in which module data is
                stored. Note: first element of this list is a directory
                name. File names are normally specified as relative to
                this directory.

            url (str): Actual study URL (the original study file path).
                Note: this parameter is provided for information
                purposes only! Depending on version of SALOME being used
                this parameter may be empty!

        Returns:
            bool: *True* in case of success; *False* otherwise
        """
        debug_message("salomegui.load(): url: {0}, files: {1}"
                      .format(url, files))
        # do nothing if url is empty
        if not url:
            return False
        try:
            ajs = os.path.join(files[0], files[1])
            self._setStudy(Study.load(self, ajs, url))
            self.study().set_url(url)
            self.study().loadEmbeddedFilesWrapper(files[0], files[2:])
            return True
        except IOError:
            pass
        return False

    def close(self):
        """Clean-up data model to handle study closure."""
        if self._loader:
            self._loader.closure_tasks()

        # delete directory with embedded files
        if self.study():
            self.study().history.clean_embedded_files()

        Controller.abortAll()
        self._setStudy(None)
        if self.work_space:
            workspace_state = self.work_space.saveState()
            try:
                self.preferencesMgr().setValue("workspace_state",
                                               workspace_state)
            except TypeError:
                pass
        self.work_space = None

    def hasModule(self, name):
        """Reimplemented from AsterGui."""
        try:
            return get_salome_gui().getComponentUserName(name) is not None
        except (ImportError, AttributeError):
            pass
        return False

    def showResults(self):
        """Reimplemented from AsterGui."""
        selected = self.selected(Context.DataFiles)
        if check_selection(selected, size=1, typeid=NodeType.Unit):
            node = self.study().node(selected[0])

            if node.filename is None:
                return

            if not os.path.exists(node.filename):
                message = translate("AsterStudy", "File '{}' does not exist.")
                message = message.format(node.filename)
                Q.QMessageBox.critical(self.mainWindow(), "AsterStudy",
                                       message)
                return

            self.showResultsFile(node.filename)

    def showResultsFile(self, filename):
        """Show results from a MED file in 'Results' tab.

        Arguments:
            filename (str): MED file to be opened.
        """
        size_mb = os.path.getsize(filename) / (1024. * 1024)

        # Show a loading message as this action is not instantaneous
        results = self.workSpace().view(Context.Results)
        if results.pv_view:
            msg = translate("AsterStudy",
                            "Loading result file ({0:.1f} MB)"
                            .format(size_mb))
        else:
            msg = translate("AsterStudy",
                            "Initializing post-processor "
                            "and loading result file ({0:.1f} MB)"
                            .format(size_mb))
        loader = LoadingMessage(self.main_window, msg, True)

        results.load_med_result(filename, loader)

    def showExternalResults(self):
        """Open a results file in MED format in the Resuls tab."""
        msg = translate("AsterStudy",
                        "The result file must be in the MED format "
                        "and created by code_aster.\n"
                        "Otherwise the post-processing will fail!")
        buttons = Q.QMessageBox.Ok | Q.QMessageBox.Cancel
        answ = Q.QMessageBox.warning(self.mainWindow(), "AsterStudy",
                                     msg, buttons, Q.QMessageBox.Ok)
        if answ != Q.QMessageBox.Ok:
            return

        file_name = get_file_name(1, self.mainWindow(),
                                  "Select a results file in MED format", "",
                                  [common_filters()[0], common_filters()[-1]])
        if not file_name:
            return

        if not is_medfile(file_name):
            msg = translate("AsterStudy",
                            "The selected file is not in MED format.")
            Q.QMessageBox.critical(self.mainWindow(), "AsterStudy", msg)
            return

        self.showResultsFile(file_name)

    def openInParavis(self):
        """Reimplemented from AsterGui."""
        selected = self.selected(Context.DataFiles)
        if check_selection(selected, size=1, typeid=NodeType.Unit):
            node = self.study().node(selected[0])

            if node.filename is None:
                return

            if not os.path.exists(node.filename):
                message = translate("AsterStudy", "File '{}' does not exist.")
                message = message.format(node.filename)
                Q.QMessageBox.critical(self.mainWindow(), "AsterStudy",
                                       message)
                return

            # activate PARAVIS module
            paravis = get_salome_gui().getComponentUserName('PARAVIS')
            get_salome_pyqt().activateModule(paravis)

            # import pvsimple, load med file
            import pvsimple as pvs
            proxy = pvs.MEDReader(FileName=node.filename)
            pvs.RenameSource(str(os.path.basename(node.filename)), proxy)
            pvs.SetActiveSource(proxy)

            # try to automatically select a viewable array (first points field)
            sep = proxy.GetProperty('Separator').GetData()
            pvidents = proxy.GetProperty("FieldsTreeInfo")[::2]
            if not pvidents:
                return

            pvident = None
            for pvident in pvidents:
                if '{}P1'.format(sep) in pvident:
                    break
            proxy.AllArrays = [pvident]

            array, disc = pvident.split("/")[-1].split(sep)
            pvsup = 'POINTS' if 'P' in disc else 'CELLS'

            # show representation
            view = pvs.GetActiveViewOrCreate('RenderView')
            display = pvs.Show(proxy, view)

            # automatically color by the relevant array
            pvs.ColorBy(display, (pvsup, array))

            # associate the data time steps to the animation scene
            scene = pvs.GetAnimationScene()
            scene.PlayMode = str('Snap To TimeSteps')

            pvs.Render()
            view.ResetCamera()

    def createMeshView(self, parent=None):
        """Reimplemented from AsterGui."""
        no_mesh_view = behavior().no_mesh_view
        return MeshView(self, parent) if not no_mesh_view and \
            hasattr(get_salome_pyqt(), 'getViewWidget') \
            else MeshBaseView(self, parent)

    def _createMainWindow(self):
        """Initialize main window of application."""
        self.main_window = get_salome_pyqt().getDesktop()

    def _updateActions(self):
        """Update state of actions, menus, toolbars, etc."""
        AsterGui._updateActions(self)

        has_study = self.study() is not None
        is_modified = has_study and self.study().isModified()
        get_salome_pyqt().setModified(is_modified)

    def autosave(self):
        """Calls SALOME save mechanism"""
        # disable pylint, `salome` module only known within salome python shell
        import salome # pragma pylint: disable=import-error
        salome.salome_init() # necessary or not?
        salome.myStudy.Save(False, False)

    def onSelectionUpdated(self, entryList):
        """
        called when selection is modified on other views (modules, viewers...)
        """
        # Look if the group widget is on display
        if self.workSpace().workingMode() == WorkingMode.CaseMode:
            edit_panel = self.workSpace().panel(Panel.Edit)
            if edit_panel is not None:
                editor = edit_panel.editor()
                if isinstance(editor, ParameterPanel):
                    current_pwin = editor.currentParameterView()
                    if isinstance(current_pwin, ParameterMeshGroupWindow):
                        current_pview = current_pwin.view()
                        mview = current_pview.meshview()
                        if not mview.enable_selection:
                            return
                        # Tick box for all selected objects
                        import salome
                        grnames = [salome.IDToSObject(e).GetName() \
                                    for e in entryList]
                        current_pview.setSelectedMeshGroups(grnames, True)

class LoadingMessage(Q.QObject):
    """Object that manages loading messages."""

    def __init__(self, parent, message="Loading", closable=True):
        """Initialization.

        Arguments:
            parent (QWidget): Parent widget.
        """
        super().__init__()

        self._done = False
        self.widget = None
        self.timer = None
        self.parent = parent
        self.message = message
        self.closable = closable

    def start(self, interval=1000):
        """Shows a loading page that is maintained until it is done."""
        self.widget = PopupFrame(self.parent,
                                 msg=self.message,
                                 closable=self.closable)
        self.widget.move(0, 0)
        self.widget.resize(self.parent.width(), self.parent.height())
        self.widget.show()
        self.widget.closed.connect(self.close)

        self.timer = Q.QTimer(self.widget)
        self.timer.setInterval(interval)
        self.timer.timeout.connect(self.check_end)
        self.timer.start()
        self.init_tasks()

    # pragma pylint: disable=no-self-use
    def init_tasks(self):
        """Execute initialization tasks"""
        return

    # pragma pylint: disable=no-self-use
    def closure_tasks(self):
        """Execute closure tasks"""
        return

    def close(self):
        """Closes the popup manually (without interrupting tasks that are
        eventually running in background).
        """
        self.terminate()
        self.check_end()

    def check_end(self):
        """Check if the loading popup can be closed."""
        if self._done:
            self.timer.stop()
            self.widget.close()

    def terminate(self):
        """Note that the loading is terminated."""
        self._done = True

class BackgroundLoading(LoadingMessage):
    """Object that manage the loading of the module."""

    def __init__(self, parent):
        """Initialization.

        Arguments:
            parent (QWidget): Parent widget.
        """
        msg = translate("AsterStudy",
                        "Please wait while AsterStudy "
                        "finishes loading...")
        LoadingMessage.__init__(self, parent, msg)
        self.mountWorker = MountWorker()

    def init_tasks(self):
        """Execute initialization tasks"""
        if behavior().connect_servers_init:
            self.mount()

    def closure_tasks(self):
        """Execute closure tasks"""
        self.unmount()

    def mount(self):
        """Start thread to mount remote filesystems."""
        # self.mountThread.start()
        # self.mountStarted.emit()
        self.mountWorker.mount()

    def unmount(self):
        """Unmount remote filesystems."""
        self.mountWorker.unmount()
