# -*- coding: utf-8 -*-

# Copyright 2016 EDF R&D
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License Version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, you may download a copy of license
# from https://www.gnu.org/licenses/gpl-3.0.

"""
Data Files view
---------------

The module implements *Data Files* view for AsterStudy application.
See `DataFiles` class for more details.

"""


import os.path as osp

from PyQt5 import Qt as Q

from ...common import auto_datafile_naming, connect, load_icon, translate
from .. import Context, Entity, NodeType, Panel, Role, check_selection
from ..actions import OpenWithAction
from ..controller import Controller
from ..widgets import ConvertMeshWindow, TitleWidget, TreeDelegate
from .dirspanel import edit_directory
from .model import findIndex, force_resort

__all__ = ["DataFiles"]

# note: the following pragma is added to prevent pylint complaining
#       about functions that follow Qt naming conventions;
#       it should go after all global functions
# pragma pylint: disable=invalid-name


class FilesView(Q.QTreeView):
    "Tree view widget to display file descriptors."

    def __init__(self, parent=None):
        """
        Create tree view.

        Arguments:
            parent (Optional[QWidget]): Parent widget. Defaults to
                *None*.
        """
        super().__init__(parent)

        self.setItemDelegate(TreeDelegate(-1, self))

        self.header().setSectionResizeMode(Q.QHeaderView.ResizeToContents)
        self.setSortingEnabled(True)
        self.sortByColumn(0, Q.Qt.AscendingOrder)

        self.setEditTriggers(Q.QAbstractItemView.AllEditTriggers)
        self.setSelectionBehavior(Q.QAbstractItemView.SelectRows)
        self.setSelectionMode(Q.QAbstractItemView.SingleSelection)
        self.setContextMenuPolicy(Q.Qt.CustomContextMenu)

    def selected(self):
        """
        Get selected rows.

        Returns:
            QModelIndexList: List of selected rows.
        """
        return self.selectionModel().selectedRows()

    def mouseDoubleClickEvent(self, event):
        """
        Process mouse double click event.

        Redefined from *QTreeView* class; this is needed to prevent
        non-necessary item expanding in some cases.

        Arguments:
            event (QMouseEvent): Mouse event.
        """
        index = self.indexAt(event.pos())
        if index.isValid():
            typ = index.data(Role.TypeRole)
            if typ in (NodeType.Unit, NodeType.Stage, NodeType.Dir):
                self.doubleClicked.emit(index)
                return
        super().mouseDoubleClickEvent(event)


class DataFiles(Q.QWidget):
    """Data Files view."""

    itemSelectionChanged = Q.pyqtSignal()
    """
    Signal: emitted when selection is changed in the view.
    """

    itemDoubleClicked = Q.pyqtSignal(Entity)
    """
    Signal: emitted when item is activated in the view.

    Arguments:
        entity (Entity): Data item being activated.
    """

    Add = 0
    Edit = 1
    View = 2
    Delete = 3
    EmbedFile = 4
    GoTo = 5
    OpenWith = 6
    OpenInEditor = 7
    OpenInParaVis = 8
    ConvertMesh = 9
    SetupDirs = 10
    RemoveDir = 11
    Browse = 12
    ConnectServers = 13
    PostProcess = 14
    AutoFileNaming = 15
    ShowResultsFile = 16

    def __init__(self, astergui, parent=None):  # pylint: disable=too-many-statements
        """
        Create view.

        Arguments:
            astergui (AsterGui): *AsterGui* instance.
            parent (Optional[QWidget]): Parent widget. Defaults to
                *None*.
        """
        super().__init__(parent)
        self.astergui = astergui
        self.setObjectName("DataFilesBase")
        self.ops = {}

        # Panel title
        self.title = TitleWidget(translate("DataFiles", "Data Files"), self)

        # Files tree
        self.view = FilesView(self)
        self.view.setObjectName('DataFilesView')
        connect(self.view.clicked, self.updateButtonsState)
        connect(self.view.doubleClicked, self._doubleClicked)
        connect(self.view.customContextMenuRequested, self._onCustomContextMenuRequested)

        # - add file
        action = Q.QAction(translate("AsterStudy", "&Add File"), self)
        action.setToolTip(translate("AsterStudy", "Add file"))
        action.setStatusTip(translate("AsterStudy",
                                      "Add a data file to the stage"))
        action.setIcon(load_icon("as_pic_new_file.png"))
        connect(action.triggered, self.add)
        self.ops[DataFiles.Add] = action

        # - edit file
        action = Q.QAction(translate("AsterStudy", "&Edit"), self)
        action.setToolTip(translate("AsterStudy", "Edit file"))
        action.setStatusTip(translate("AsterStudy",
                                      "Edit properties of selected data file"))
        action.setIcon(load_icon("as_pic_edit_file.png"))
        connect(action.triggered, self.edit)
        self.ops[DataFiles.Edit] = action

        # - view file
        action = Q.QAction(translate("AsterStudy", "&View"), self)
        action.setToolTip(translate("AsterStudy", "View file"))
        action.setStatusTip(translate("AsterStudy",
                                      "View properties of selected data file"))
        action.setIcon(load_icon("as_pic_view_file.png"))
        connect(action.triggered, self.edit)
        self.ops[DataFiles.View] = action

        # - remove file
        action = Q.QAction(translate("AsterStudy", "&Delete"), self)
        action.setToolTip(translate("AsterStudy", "Delete file"))
        action.setStatusTip(translate("AsterStudy",
                                      "Remove selected data file from the stage"))
        action.setIcon(load_icon("as_pic_remove_file.png"))
        connect(action.triggered, self.delete)
        self.ops[DataFiles.Delete] = action

        # - embed/unembed file
        action = Q.QAction(translate("AsterStudy", "&Embedded"), self)
        action.setToolTip(translate("AsterStudy", "Embedded"))
        action.setStatusTip(translate("AsterStudy", "Embed/Unembed selected data file"))
        action.setIcon(load_icon("as_pic_embed_file.png"))
        action.setCheckable(True)
        connect(action.triggered, self.embedFile)
        self.ops[DataFiles.EmbedFile] = action

        # - go to
        action = Q.QAction(translate("AsterStudy", "&Go To"), self)
        action.setToolTip(translate("AsterStudy", "Go to"))
        action.setStatusTip(translate("AsterStudy",
                                      "Go to the selected command"))
        action.setIcon(load_icon("as_pic_goto.png"))
        connect(action.triggered, self.goto)
        self.ops[DataFiles.GoTo] = action

        # - open with
        action = OpenWithAction(self, self.astergui.mainWindow())
        self.ops[DataFiles.OpenWith] = action

        # - open in editor
        action = Q.QAction(translate("AsterStudy", "&Open In Editor"), self)
        action.setToolTip(translate("AsterStudy", "Open in editor"))
        action.setStatusTip(translate("AsterStudy",
                                      "View selected data file in the text editor"))
        action.setIcon(load_icon("as_pic_open_in_editor.png"))
        action.setShortcut("F2")
        connect(action.triggered, self.openInEditor)
        self.ops[DataFiles.OpenInEditor] = action

        # - post-process in the results tab
        action = Q.QAction(translate("AsterStudy", "&Post-process"), self)
        action.setToolTip(translate("AsterStudy", "Post-process"))
        action.setStatusTip(translate("AsterStudy",
                                      "Post-process the result the Results tab"))
        action.setIcon(load_icon("as_pic_open_in_paravis.png"))
        connect(action.triggered, self.astergui.showResults)
        self.ops[DataFiles.PostProcess] = action

        # - open in paravis
        action = Q.QAction(translate("AsterStudy", "Open In Para&Vis"), self)
        action.setToolTip(translate("AsterStudy", "Open in ParaVis"))
        action.setStatusTip(translate("AsterStudy",
                                      "View selected file in SALOME ParaVis module"))
        action.setIcon(load_icon("as_pic_open_in_paravis.png"))
        connect(action.triggered, self.astergui.openInParavis)
        self.ops[DataFiles.OpenInParaVis] = action

        # - convert mesh
        action = Q.QAction(translate("AsterStudy", "Convert as Mesh Object"), self)
        action.setToolTip(translate("AsterStudy", "Convert as Mesh object"))
        action.setStatusTip(translate("AsterStudy",
                                      "Convert mesh file as a Mesh object"))
        connect(action.triggered, self.convertMesh)
        self.ops[DataFiles.ConvertMesh] = action

        action = Q.QAction(translate("AsterStudy", "&Set-up Directories"), self)
        action.setToolTip(translate("AsterStudy", "Set-up Directories"))
        action.setStatusTip(translate("AsterStudy",
                                      "Set-up input and output directories of the case"))
        action.setIcon(load_icon("as_pic_setup_dirs.png"))
        connect(action.triggered, self.astergui.setupDirs)
        self.ops[DataFiles.SetupDirs] = action

        # - remove directory
        action = Q.QAction(translate("AsterStudy", "&Remove Directory"), self)
        action.setToolTip(translate("AsterStudy", "Remove directory"))
        action.setStatusTip(translate("AsterStudy",
                                      "Remove directory and all enclosed files from the disk"))
        action.setIcon(load_icon("as_pic_remove.png"))
        connect(action.triggered, self.removeDir)
        self.ops[DataFiles.RemoveDir] = action

        # - browse
        action = Q.QAction(translate("AsterStudy", "&Browse Directory"), self)
        action.setToolTip(translate("AsterStudy", "Browse directory"))
        action.setStatusTip(translate("AsterStudy",
                                      "Show selected file in the explorer"))
        action.setIcon(load_icon("as_pic_browse.png"))
        connect(action.triggered, self.browse)
        self.ops[DataFiles.Browse] = action

        # - connect servers
        action = Q.QAction(translate("AsterStudy", "Connect Remote Servers"))
        action.setToolTip(translate("AsterStudy", "Connect remote servers"))
        action.setStatusTip(translate("AsterStudy",
                                      "Connect and mount filesystems from remote servers"))
        connect(action.triggered, self.astergui.connectServers)
        self.ops[DataFiles.ConnectServers] = action

        # - auto naming
        action = Q.QAction(translate("AsterStudy", "Assign Default Filenames"))
        action.setToolTip(translate("AsterStudy", "Assign default filenames"))
        action.setStatusTip(translate("AsterStudy",
                                      "Assign a default filename to all unnamed files"))
        connect(action.triggered, self.autonaming)
        self.ops[DataFiles.AutoFileNaming] = action

        # - post-process results file
        action = Q.QAction(translate("AsterStudy", "Post-process MED Results File"))
        action.setToolTip(translate("AsterStudy", "Post-process a MED results file"))
        action.setStatusTip(translate("AsterStudy",
                                      "Post-process a results file in MED format"))
        connect(action.triggered, self.astergui.showExternalResults)
        self.ops[DataFiles.ShowResultsFile] = action

        # Fill in title's toolbar
        self.title.toolbar().addAction(self.ops[DataFiles.Add])
        self.title.toolbar().addAction(self.ops[DataFiles.Edit])
        self.title.toolbar().addAction(self.ops[DataFiles.View])
        self.title.toolbar().addAction(self.ops[DataFiles.Delete])
        self.title.toolbar().addAction(self.ops[DataFiles.GoTo])

        # Layout widgets
        vbox_layout = Q.QVBoxLayout(self)
        vbox_layout.setContentsMargins(0, 0, 0, 0)
        vbox_layout.setSpacing(0)
        vbox_layout.addWidget(self.title)
        vbox_layout.addWidget(self.view)

    def setModel(self, model):
        """
        Set model to the view.

        Arguments:
            model (QAbstractItemModel): Data model.
        """
        if self.view.model() is model:
            return
        self.view.setModel(model)
        if model is not None:
            connect(model.modelReset, self.view.expandAll)
            connect(model.modelReset, self.updateButtonsState)
            connect(self.view.selectionModel().currentChanged,
                    self.updateButtonsState)
            connect(self.view.selectionModel().selectionChanged,
                    self.itemSelectionChanged)

    def setSelection(self, selection):
        """
        Update model according to selection in Data Settings.

        Arguments:
            selection (list[Entity]): Objects being selected.
        """
        model = self.view.model()

        if len(selection) == 1:
            target = selection[0]
            name = None
            if target is not model.target:
                model.target = target

                if target.type == NodeType.Case:
                    self.view.setRootIndex(model.index(-1, -1))
                    name = self.astergui.study().node(target).name
                elif target.type == NodeType.Stage:
                    self.view.setRootIndex(findIndex(model, target))
                    name = self.astergui.study().node(target).name
                elif target.type in (NodeType.Category, NodeType.Command):
                    name = self.astergui.study().node(target).name
                    stage = self.astergui.study().node(target).stage
                    stage_entity = Entity(stage.uid, NodeType.Stage)
                    self.view.setRootIndex(findIndex(model, stage_entity))

            self.show()
            if name:
                title = translate("DataFiles", "Data Files of {}".format(name))
            else:
                title = translate("DataFiles", "Data Files")
            self.title.setText(title)

        else:
            self.hide()

    def update(self):
        """Update view."""
        super().update()
        if self.view.model() is not None:
            self.view.model().update()

    def selection(self):
        """
        Get currently selected objects.

        Returns:
            list: List of selected objects.
        """
        result = []
        indices = self.view.selected()
        for index in indices:
            entity = index2entity(index)
            if entity is not None:
                result.append(entity)
        return result

    def resort(self):
        """Re-sort items in the view."""
        with force_resort():
            self.view.sortByColumn(0, Q.Qt.AscendingOrder)
        self.view.sortByColumn(0, Q.Qt.AscendingOrder)

    @Q.pyqtSlot(Q.QPoint)
    def _onCustomContextMenuRequested(self, pos):
        self.updateButtonsState()

        selected = self.selection()
        if len(selected) != 1:
            return
        selected = selected[0]

        menu = Q.QMenu(self.astergui.mainWindow())

        if selected.type == NodeType.Case:
            menu.addAction(self.ops[DataFiles.SetupDirs])
            menu.setDefaultAction(self.ops[DataFiles.SetupDirs])
            menu.addAction(self.ops[DataFiles.ConnectServers])
            menu.addSeparator()
            menu.addAction(self.ops[DataFiles.ShowResultsFile])
            menu.addAction(self.ops[DataFiles.AutoFileNaming])

        if selected.type == NodeType.Dir:
            menu.addAction(self.ops[DataFiles.Edit])
            menu.setDefaultAction(self.ops[DataFiles.Edit])
            menu.addAction(self.ops[DataFiles.Delete])
            menu.addAction(self.ops[DataFiles.RemoveDir])
            menu.addSeparator()
            menu.addAction(self.ops[DataFiles.Browse])

        if selected.type == NodeType.Stage:
            menu.addAction(self.ops[DataFiles.Add])
            menu.setDefaultAction(self.ops[DataFiles.Add])
            menu.addSeparator()
            menu.addAction(self.ops[DataFiles.ShowResultsFile])
            menu.addAction(self.ops[DataFiles.AutoFileNaming])

        if selected.type == NodeType.Unit:
            menu.addAction(self.ops[DataFiles.Edit])
            menu.addAction(self.ops[DataFiles.View])
            menu.addAction(self.ops[DataFiles.Delete])
            menu.addSeparator()
            menu.addAction(self.ops[DataFiles.AutoFileNaming])
            menu.addSeparator()
            menu.addAction(self.ops[DataFiles.EmbedFile])
            menu.addSeparator()
            menu.addAction(self.ops[DataFiles.Browse])
            menu.addSeparator()
            menu.addAction(self.ops[DataFiles.OpenInEditor])
            menu.addAction(self.ops[DataFiles.PostProcess])
            menu.addAction(self.ops[DataFiles.OpenInParaVis])
            menu.addAction(self.ops[DataFiles.OpenWith])
            menu.addAction(self.ops[DataFiles.ConvertMesh])

            if self._isReadOnly():
                menu.setDefaultAction(self.ops[DataFiles.Edit])
            else:
                menu.setDefaultAction(self.ops[DataFiles.View])

        if selected.type == NodeType.Command:
            menu.addAction(self.ops[DataFiles.GoTo])
            menu.setDefaultAction(self.ops[DataFiles.GoTo])

        if menu.actions():
            menu.exec_(self.view.mapToGlobal(pos))

    @Q.pyqtSlot()
    @Q.pyqtSlot(Q.QModelIndex)
    def updateButtonsState(self):
        """
        Update buttons according to the current selection.
        """
        for op in self.ops.values():
            op.setEnabled(False)

        selected = self.view.selected()
        is_read_only = self._isReadOnly()
        if len(selected) == 1:
            typ = selected[0].data(Role.TypeRole)
            obj = selected[0].data(Role.CustomRole)

            if typ == NodeType.Case:
                self.ops[DataFiles.SetupDirs].setEnabled(not is_read_only)
                self.ops[DataFiles.ConnectServers].setEnabled(True)
                self.ops[DataFiles.ShowResultsFile].setEnabled(True)
                self.ops[DataFiles.AutoFileNaming].setEnabled(not is_read_only)

            if typ == NodeType.Stage:
                is_text_stage = obj.is_text_mode()
                self.ops[DataFiles.Add].setEnabled(is_text_stage and not is_read_only)
                self.ops[DataFiles.ShowResultsFile].setEnabled(True)
                self.ops[DataFiles.AutoFileNaming].setEnabled(not is_read_only)

            if typ == NodeType.Unit:
                self.ops[DataFiles.Delete].setEnabled(not is_read_only and obj.deletable)
                self.ops[DataFiles.Browse].setEnabled(obj.valid)
                self.ops[DataFiles.OpenInEditor].setEnabled(obj.for_editor)
                self.ops[DataFiles.ConvertMesh].setEnabled(obj.exists)

                self.ops[DataFiles.Edit].setVisible(not is_read_only)
                self.ops[DataFiles.Edit].setEnabled(not is_read_only)
                self.ops[DataFiles.View].setVisible(is_read_only)
                self.ops[DataFiles.View].setEnabled(is_read_only)
                self.ops[DataFiles.AutoFileNaming].setEnabled(not is_read_only)

                is_ok = not is_read_only and obj.valid \
                        and not obj.is_reference and obj.embedded is not None
                self.ops[DataFiles.EmbedFile].setEnabled(is_ok)
                self.ops[DataFiles.EmbedFile].setChecked(obj.embedded or False)

                self.ops[DataFiles.PostProcess].setVisible(self.astergui.hasModule('PARAVIS'))
                self.ops[DataFiles.PostProcess].setEnabled(obj.for_paravis)

                self.ops[DataFiles.OpenInParaVis].setVisible(self.astergui.hasModule('PARAVIS'))
                self.ops[DataFiles.OpenInParaVis].setEnabled(obj.for_paravis)

                self.ops[DataFiles.OpenWith].setFileName(obj.filename)
                self.ops[DataFiles.OpenWith].setEnabled(obj.exists)

            if typ == NodeType.Command:
                self.ops[DataFiles.GoTo].setEnabled(True)

            if typ == NodeType.Dir:
                self.ops[DataFiles.Edit].setEnabled(not is_read_only)
                self.ops[DataFiles.Delete].setEnabled(not is_read_only and obj.deletable)
                self.ops[DataFiles.RemoveDir].setEnabled(not is_read_only and obj.removable)
                self.ops[DataFiles.Browse].setEnabled(True)

    @Q.pyqtSlot()
    def add(self):
        """Called when 'Add' button is clicked."""
        from . import UnitPanel

        selected = self.selection()
        if check_selection(selected, size=1, typeid=NodeType.Stage):
            if self.astergui.prepare_for_new_operation():
                node = self.astergui.study().node(selected[0])
                editor = UnitPanel(node, self.astergui)
                self.astergui.workSpace().panel(Panel.Edit).setEditor(editor)

    @Q.pyqtSlot()
    def edit(self):
        """Called when 'Edit' button is clicked or item is activated."""
        from . import UnitPanel

        is_current = self.astergui.study().isCurrentCase()
        selected = self.selection()
        if check_selection(selected, size=1, typeid=NodeType.Dir):
            node = self.astergui.study().node(selected[0])
            if is_current:
                edit_directory(self.astergui, node)

        elif check_selection(selected, size=1, typeid=NodeType.Unit):
            node = self.astergui.study().node(selected[0])
            editor = UnitPanel(node, self.astergui)
            editor.setReadOnly(not is_current)
            self.astergui.workSpace().panel(Panel.Edit).setEditor(editor)

    @Q.pyqtSlot()
    def delete(self):
        """Called when 'Remove File' button is clicked."""
        self.astergui.delete(Context.DataFiles)

    @Q.pyqtSlot()
    def autonaming(self):
        """Automatically assign a default filenames to unnamed files."""
        dirn = self.astergui.study().history.folder
        if not dirn:
            Q.QMessageBox.warning(self, "AsterStudy",
                                  translate("AsterStudy",
                                            "Please save the study first."))
            return

        selected = self.selection()
        if check_selection(selected, size=1,
                           typeid=(NodeType.Case, NodeType.Stage,
                                   NodeType.Unit)):
            node = self.astergui.study().node(selected[0])
            nodetype = NodeType.value2str(selected[0].type)
            auto_datafile_naming(nodetype, node, dirn)

    @Q.pyqtSlot()
    def removeDir(self):
        """Called when 'Remove Directory' button is clicked."""
        selected = self.selection()
        if check_selection(selected, size=1, typeid=NodeType.Dir):
            directory = self.astergui.study().node(selected[0])
            self.astergui.study().removeDir(directory)

        self.astergui.update()

    @Q.pyqtSlot()
    def browse(self):
        """Called when 'Browse directory' button is clicked."""
        self.astergui.browse(Context.DataFiles)

    @Q.pyqtSlot()
    def embedFile(self):
        """Embed / unembed file."""
        from . import UnitPanel

        selected = self.selection()
        if check_selection(selected, size=1, typeid=NodeType.Unit):
            node = self.astergui.study().node(selected[0])
            is_checked = self.ops[DataFiles.EmbedFile].isChecked()
            editor = UnitPanel(node, self.astergui)
            editor.embedded_check.setChecked(is_checked)

            if editor.embedded_check.isChecked() == is_checked:
                op_name = translate("AsterStudy", "Embed file") if is_checked \
                    else  translate("AsterStudy", "Unembed file")
                if self.astergui.prepare_for_new_operation():
                    ctr = Controller(op_name, self.astergui)
                    ctr.controllerStart()
                    combo_index = editor.file_combo.currentIndex()
                    index = editor.file_combo.model().index(combo_index, 0)
                    filename = index.model().data(index, Q.Qt.ToolTipRole)
                    editor.unit_model.transferFile(filename)
                    node.filename = filename
                    node.embedded = is_checked
                    ctr.controllerCommit()
                    self.astergui.study().commit(op_name)
                    self.astergui.update()

    @Q.pyqtSlot()
    def goto(self):
        """Called when 'Go to' button is clicked."""
        selected = self.selection()
        if check_selection(selected, size=1, typeid=NodeType.Command):
            node = self.astergui.study().node(selected[0])
            self.astergui.update(autoSelect=node, context=Context.DataSettings)

    @Q.pyqtSlot(bool)
    def openInEditor(self):
        """Open in editor."""
        selected = self.selection()
        if check_selection(selected, size=1, typeid=NodeType.Unit):
            node = self.astergui.study().node(selected[0])
            if node.filename is not None:
                self.astergui.openFileInEditor(node.filename, "data_file")

    @Q.pyqtSlot(bool)
    def convertMesh(self):
        """Convert Mesh file."""
        selected = self.selection()
        if check_selection(selected, size=1, typeid=NodeType.Unit):
            node = self.astergui.study().node(selected[0])
            if node.filename is None:
                return
            if not osp.exists(node.filename):
                return
            dia = ConvertMeshWindow(node)
            dia.exec_()

    @Q.pyqtSlot(Q.QModelIndex)
    def _doubleClicked(self, index):
        """
        Called when item is double clicked in the view.

        Emits `itemDoubleClicked(entity)` signal.

        Arguments:
            index (QModelIndex): Model index being activated.
        """
        entity = index2entity(index)
        if entity is not None:
            if entity.type in (NodeType.Stage,):
                is_ok = self.astergui.study().node(entity).is_text_mode() and \
                    not self._isReadOnly()
            elif entity.type in (NodeType.Dir,):
                is_ok = not self._isReadOnly()
            else:
                is_ok = True
            if is_ok:
                self.itemDoubleClicked.emit(entity)

    def _isReadOnly(self):
        """
        Check if view is in Read-only mode.

        Returns:
            bool: *True* if view works in Read-only mode; *False*
            otherwise.
        """
        is_read_only = True
        model = self.view.model()
        if model is not None:
            model = model.sourceModel()
            case = model.case
            is_read_only = case is not case.model.current_case
        return is_read_only


def index2entity(index):
    """
    Create selection entity from model index.

    Arguments:
        index (QModelIndex): Model index.

    Returns:
        Entity: Selection entity.
    """
    return Entity(index.data(Role.IdRole), typeid=index.data(Role.TypeRole),
                  flags=index.flags()) if index.isValid() else None
