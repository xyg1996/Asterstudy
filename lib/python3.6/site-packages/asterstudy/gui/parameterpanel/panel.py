# -*- coding: utf-8 -*-

# Copyright 2016 EDF R&D
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License Version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, you may download a copy of license
# from https://www.gnu.org/licenses/gpl-3.0.

"""
Parameters Panel
----------------

Implementation of the Parameters panel for AsterStudy application.

"""


from functools import partial

from PyQt5.Qt import (QAction, QCheckBox, QDesktopServices, QDialogButtonBox,
                      QEvent, QHBoxLayout, QLabel, QLineEdit, QMessageBox,
                      QRegExp, QRegExpValidator, QStackedWidget, Qt, QTimer, QToolBar,
                      QUrl, QVBoxLayout, QWhatsThis)

from .. import ActionType, Context, Panel, is_noname
from ...common import (CFG, bold, connect, disconnect, enable_autocopy, get_cmd_mesh, href,
                       image, italic, load_icon, load_pixmap, preformat,
                       translate)
from ...datamodel import CATA, IDS, get_cata_typeid
from ...datamodel.command.helper import avail_meshes_in_cmd
from ..behavior import behavior
from ..commentpanel import CommentPanel
from ..controller import Controller, WidgetController
from ..editionwidget import EditionWidget
from ..unit_model import UnitModel
from ..widgets import HLine, MessageBox
from .basic import EditorLink, Options
from .path import ParameterPath
from .widgets import ParameterTitle
from .windows import (ParameterFactWindow, ParameterListWindow,
                      ParameterMeshGroupWindow, ParameterTableWindow)

# note: the following pragma is added to prevent pylint complaining
#       about functions that follow Qt naming conventions;
#       it should go after all global functions
# pragma pylint: disable=invalid-name

class ParameterPanel(EditionWidget, WidgetController):
    """Edition Panel implementation."""

    def __init__(self, astergui, parent=None):
        """
        Create panel.

        Arguments:
            astergui (AsterGui): AsterGui instance.
            parent (Optional[QWidget]): Parent widget.
        """
        super().__init__(parent=parent,
                         name=translate("ParameterPanel", "Edit command"),
                         astergui=astergui)
        self.setPixmap(load_pixmap("as_pic_edit_command.png"))

        self._files_model = astergui.study().dataFilesModel()
        self._unit_model = None
        self._summaryTimer = QTimer(self)
        self._summaryTimer.setInterval(500)
        self._summaryTimer.setSingleShot(True)
        self._summaryTimer.timeout.connect(self._updateSummaryView)

        self._command = None
        self.title = ParameterTitle(self)
        self.title.installEventFilter(self)
        self._name = QLineEdit(self)
        self._nameauto = translate("AsterStudy", "automatic")
        self._reuse_label = QLabel(translate("AsterStudy",
                                             "or reuse the input object"), self)
        self._reuse = QCheckBox()
        self._reuse.clicked.connect(self._reuseClicked)
        self.views = QStackedWidget(self)
        v_layout = QVBoxLayout(self)
        v_layout.setContentsMargins(0, 0, 0, 0)
        v_layout.setSpacing(5)
        v_layout.addWidget(self.title)
        v_layout.addWidget(HLine(self))

        n_layout = QHBoxLayout()
        v_layout.addLayout(n_layout)
        n_layout.addWidget(QLabel(translate("ParameterPanel", "Name"), self))
        n_layout.addWidget(self._name)
        n_layout.addWidget(self._reuse_label)
        n_layout.addWidget(self._reuse)
        self._reuse.setVisible(False)
        self._reuse_label.setVisible(False)
        # force to be a valid identifier + length <= 8
        self._name.setValidator(QRegExpValidator(QRegExp(r"[a-zA-Z]\w{1,7}")))

        # create toolbar
        tbar = QToolBar(self)
        tbar.setToolButtonStyle(Qt.ToolButtonIconOnly)
        # - Edit comment
        edit_comment = QAction(translate("AsterStudy", "Edit &Comment"), self)
        edit_comment.setToolTip(translate("AsterStudy", "Edit comment"))
        edit_comment.setStatusTip(translate("AsterStudy", "Edit comment for the selected object"))
        edit_comment.setIcon(load_icon("as_pic_edit_comment.png"))
        connect(edit_comment.triggered, self._editComment)
        tbar.addAction(edit_comment)
        # - Switch on/off business-translations
        title = translate("AsterStudy", "Use Business-Oriented Translations")
        self.use_translations = QAction(title, self)
        title = translate("AsterStudy", "Use Business-Oriented Translations, "
                                        "this parameter may be defined "
                                        "globally in Preferences")
        self.use_translations.setToolTip(title)
        self.use_translations.setStatusTip(title)
        self.use_translations.setIcon(load_icon("as_pic_use_translations.png"))
        self.use_translations.setCheckable(True)
        if behavior().forced_native_names:
            force = behavior().force_native_names
            self.use_translations.setDisabled(True)
            is_on = not force
        else:
            is_on = behavior().use_business_translations
        Options.use_translations = is_on
        self.use_translations.setChecked(is_on)
        connect(self.use_translations.toggled, self.updateTranslations)
        tbar.addAction(self.use_translations)
        # - Show mesh view
        show_view = astergui.action(ActionType.ShowMeshView)
        tbar.addAction(show_view)
        # - Hide unused
        hide_unused = astergui.action(ActionType.HideUnused)
        connect(hide_unused.toggled, self._unusedVisibility)
        tbar.addAction(hide_unused)
        # - Groups involved
        groups_involved = astergui.action(ActionType.CommandGroups)
        groups_involved.user_status = False
        groups_involved.panel_status = False
        connect(groups_involved.toggled, self._groupsInvolved)
        tbar.addAction(groups_involved)
        # - What's this
        whats_this = QWhatsThis.createAction(tbar)
        whats_this.setToolTip(translate("AsterStudy", "What's this?"))
        whats_this.setStatusTip(translate("AsterStudy",
                                          "Show element's description"))
        whats_this.setIcon(load_icon("as_pic_whats_this.png"))
        tbar.addAction(whats_this)
        # - Link to doc
        tbar.addAction(astergui.action(ActionType.LinkToDoc))
        self.addAction(astergui.action(ActionType.LinkToDoc))

        v_layout.addWidget(tbar)
        v_layout.addWidget(self.views)

        connect(self.meshview().infoHidden, self._infoHidden)

        self._updateState()

        self._child_panels = []
        """Panels opened by this panel that should affect its hasModifications() state."""

    def unitModel(self):
        """
        Method that get unit model.

        Returns:
            UnitModel: Unit model.
        """
        return self._unit_model

    def command(self):
        """
        Get command being edited.

        Returns:
            Command: Command being edited.
        """
        return self._command

    def setCommand(self, command):
        """
        Set command to edit.

        Arguments:
            command (Command): Command to edit.
        """
        self.clear()
        self._command = command
        if self._command is None:
            self._name.setText("")
        else:
            self._name.setText(self._command.name)
            self._unit_model = UnitModel(command.stage)
            pview = self._createParameterView(ParameterPath(self._command), '')
            connect(pview.valueChanged, self._startUpdateSummaryView)
            pview.view().setItemValue(command.storage)
            self.astergui().action(ActionType.HideUnused).setChecked(False)
            self._groupsInvolved(not pview.hideSummary())
            self.views.setCurrentWidget(pview)
            if self._command.can_reuse():
                self._reuseAddWidget()
        self._updateState()

    def registerChildPanel(self, panel):
        """
        Informs current panel that a child panel was created.

        This adds the child panel into internal list of children,
        so that we can call its ``hasModifications()`` methods before aborting.

        Arguments:
            panel (asterstudy.gui.editionwidget.EditionWidget)
        """
        self._child_panels.append(panel)
        panel.destroyed.connect(partial(self.onChildDestroyed, panel))

    def onChildDestroyed(self, panel):
        """
        Called while a child panel is being destroyed.

        Since we won't have a chance to call ``panel.hasModifications()`` later,
        we have to remove `panel` from internal list of children.
        But also, we call ``panel.hasModifications()`` for the last time,
        and if it returns `True`, we store this value into the list directly,
        which means that current panel is going to be considered «modified» forever.

        Arguments:
            panel (asterstudy.gui.editionwidget.EditionWidget)
        """
        self._child_panels.remove(panel)
        if panel.hasModifications():
            self._child_panels.append(True)

    def currentPath(self):
        """
        Get currently edited parameter path.

        Returns:
            str: currently edited parameter path.
        """
        path = ""
        wid = self.currentParameterView()
        if wid is not None:
            path = wid.path()
        return path

    def isCurrentCommand(self):
        """
        Get true if the currently edited view contains command.

        Returns:
            bool: Current edited command flag
        """
        curpath = self.currentPath()
        return ParameterPath(self.command()).isEqual(curpath)

    def currentParameterView(self):
        """
        Get current parameter view.

        Returns:
           ParameterView: current view.
        """
        return self.views.currentWidget()

    def clear(self):
        """Remove all parameter views."""
        while self.views.count() > 0:
            wid = self.views.widget(0)
            if wid is not None:
                self.views.removeWidget(wid)
                wid.deleteLater()

    def store(self):
        """
        Save data from all parameter views.
        """
        cmd = self.command()
        if cmd is not None:
            with enable_autocopy(self.astergui().study().activeCase):
                if self._name.text() != self._nameauto:
                    cmd.rename(self._name.text())
                wid = self._viewByPath(ParameterPath(cmd))
                if wid is not None:
                    cmd.init(wid.view().itemValue())

    def requiredButtons(self):
        """
        Return the combination of standard button flags required for this
        widget.

        Returns:
            int: button flags for buttons required for this widget
                 (combination of QDialogButtonBox.StandardButton flags).
        """
        if self.isCurrentCommand():
            return QDialogButtonBox.Ok | QDialogButtonBox.Apply | QDialogButtonBox.Close
        return QDialogButtonBox.Ok | QDialogButtonBox.Cancel | QDialogButtonBox.Abort

    def isButtonEnabled(self, button):
        """
        Return True if a particular button is enabled.

        Arguments:
            button (QDialogButtonBox.StandardButton): button flag.

        Returns:
            True: that means that all buttons should be enabled.
        """
        return True

    def perform(self, button):
        """
        Perform action on button click. Redefined method from the base class.

        Arguments:
            button (QDialogButtonBox.StandardButton): clicked button flag.
        """
        if button == QDialogButtonBox.Ok:
            self.performOk()
        elif button == QDialogButtonBox.Apply:
            self.performApply()
        elif button == QDialogButtonBox.Abort:
            self.performAbort()
        elif button in (QDialogButtonBox.Close, QDialogButtonBox.Cancel):
            self.performClose()

    def performOk(self):
        """Called when `Ok` button is clicked in Edition panel."""
        self.performChanges(True)

    def performApply(self):
        """Called when `Apply` button is clicked in Edition panel."""
        self.performChanges(False)

    def performAbort(self):
        """Called when `Abort` button is clicked in Edition panel."""
        pref_mgr = self.astergui().preferencesMgr()
        msg = translate("ParameterPanel",
                        "Command edition will be aborted and "
                        "all made changes will be lost. "
                        "Do you want to continue?")
        noshow = "parampanel_abort"
        ask = MessageBox.question(self.astergui().mainWindow(),
                                  translate("ParameterPanel", "Abort"),
                                  msg, QMessageBox.Yes | QMessageBox.No,
                                  QMessageBox.Yes, noshow=noshow,
                                  prefmgr=pref_mgr)
        if ask == QMessageBox.Yes:
            self.controllerAbort()

    def controllerAbort(self):
        """
        Since all changes by this panel and its children are made directly into datamodel,
        we have to revert them in case user aborts the operation.
        """
        super().controllerAbort()
        # todo: think of the way how to revert changes made by enclosed panels
        # to data model properly when aborting operation
        #self.astergui().study().revert()
        self.astergui().update()

    def performClose(self):
        """Called when `Cancel` button is clicked in Edition panel."""
        has_modif = self.hasModifications()
        if has_modif:
            pref_mgr = self.astergui().preferencesMgr()
            msg = translate("ParameterPanel",
                            "There are some unsaved modifications will be "
                            "lost. Do you want to continue?")
            noshow = "parampanel_close"
            ask = MessageBox.question(self.astergui().mainWindow(),
                                      translate("ParameterPanel", "Close"),
                                      msg, QMessageBox.Yes | QMessageBox.No,
                                      QMessageBox.Yes, noshow=noshow,
                                      prefmgr=pref_mgr)
            has_modif = ask != QMessageBox.Yes

        if not has_modif:
            self.performDissmis(True)

    def performChanges(self, close=True):
        """
        Validate and store the command into data model.
        """
        wid = self.currentParameterView()
        if wid is not None:
            view = wid.view()
            if view.validate():
                cur_path = self.currentPath()
                if self.isCurrentCommand():
                    self.store()
                    self._files_model.update()
                    if self.astergui() is not None:
                        opname = translate("ParameterPanel", "Edit command")
                        self.astergui().study().commit(opname)
                        self.astergui().update()
                    if close:
                        self.performDissmis(False)
                    msg = translate("ParameterPanel",
                                    "Command '{}' successfully stored")
                    msg = msg.format(self._name.text())
                    self.astergui().showMessage(msg)
                    wid.view().setItemValue(wid.view().itemValue())
                else:
                    child_val = view.itemValue()
                    self._removeCurrentView()
                    curview = self.currentParameterView()
                    connect(curview.valueChanged, self._startUpdateSummaryView)
                    subitem = curview.view().findItemByPath(cur_path)
                    if subitem is not None:
                        subitem.setItemValue(child_val)

        self._updateState()
        self.updateButtonStatus()
        self._child_panels = []

    def performDissmis(self, revert=True):
        """
        Cancel changes and revert the command changes.
        """
        if self.isCurrentCommand():
            self.close()
            if revert:
                self.astergui().study().revert()
            self.astergui().update()
        else:
            self._removeCurrentView()
        self._updateState()
        self.updateButtonStatus()

    def showEvent(self, event):
        """
        Reimplemented for internal reason: updates the title
        depending on read only state, etc.
        """
        title = translate("ParameterPanel", "View command") \
            if self.isReadOnly() else \
            translate("ParameterPanel", "Edit command")
        self.setWindowTitle(title)

        hide_unused = self.astergui().action(ActionType.HideUnused)
        hide_unused.setVisible(True)
        hide_unused.setChecked(self.isReadOnly())
        groups_involved = self.astergui().action(ActionType.CommandGroups)
        groups_involved.setVisible(True)
        groups_involved.setChecked(False)

        # update meshview
        meshes = avail_meshes_in_cmd(self.command())
        for i, mesh in enumerate(meshes):
            filename, meshname = get_cmd_mesh(mesh)
            if filename:
                self.meshview().displayMEDFileName(filename, meshname, 1.0,
                                                   erase=(i == 0))

        self.astergui().workSpace().view(Context.Information).update()
        super().showEvent(event)

    def hideEvent(self, event):
        """
        Reimplemented for internal reason: hides "Hide unused" action.
        """
        hide_unused = self.astergui().action(ActionType.HideUnused)
        hide_unused.setVisible(False)
        groups_involved = self.astergui().action(ActionType.CommandGroups)
        groups_involved.setChecked(False)
        groups_involved.setVisible(False)
        super().hideEvent(event)

    def updateTranslations(self):
        """
        Update translations in GUI elements.
        """
        Options.use_translations = self.use_translations.isChecked()
        self._updateState()
        for i in range(self.views.count()):
            view = self.views.widget(i)
            view.updateTranslations()

    def eventFilter(self, receiver, event):
        """
        Event filter; processes clicking ln links in What's This window.
        """
        if receiver == self.title and event.type() == QEvent.WhatsThisClicked:
            QDesktopServices.openUrl(QUrl(event.href()))
        return super().eventFilter(receiver, event)

    def hasModifications(self):
        """
        Returns `True` if this panel or one of its children has been modified.
        """
        # A child can still exist, and then we call its ``hasModifications()`` method.
        # Some children could be destroyed and replaced by `True`, see ``onChildDestroyed()``.
        for child in self._child_panels:
            if child is True \
            or (isinstance(child, Controller) and child.hasModifications()):
                return True

        if self.currentParameterView() and self.currentParameterView().view():
            return self.currentParameterView().view().hasModifications()

        return False

    def _updateState(self):
        """Update state and current title label."""
        disabled = self.command() is None
        self.setDisabled(disabled)

        if not disabled:
            disabled = is_noname(self.command())
        self._name.setDisabled(disabled)

        txt = []
        pview = self.currentParameterView()
        if pview is not None:
            txt = pview.path().names()

        ppath = None
        txt_list = []
        tooltip = ""
        whats_this = ""
        while txt:
            name = txt.pop(0)
            if ppath is None:
                ppath = ParameterPath(self.command(), name=name)
            else:
                ppath = ppath.absolutePath(name)
            if ppath.isInSequence():
                txt_list.append("[" + name + "]")
            elif get_cata_typeid(ppath.keyword()) in (IDS.simp, IDS.fact):
                # translate keyword
                kwtext = Options.translate_command(ppath.command().title, name)
                txt_list.append(kwtext)
            elif get_cata_typeid(ppath.keyword()) == IDS.command:
                # translate command
                translation = Options.translate_command(name)
                txt_list.append(translation)
                if translation != name:
                    wttext = italic(translation) + " ({})".format(bold(name))
                else:
                    wttext = bold(name)
                tooltip = preformat(wttext)
                url = self.astergui().doc_url(name)
                if url:
                    wttext += "&nbsp;"
                    wttext += href(image(CFG.rcfile("as_pic_help.png"),
                                         width=20, height=20), url)
                wttext = preformat(wttext)
                docs = CATA.get_command_docstring(name)
                if docs:
                    wttext += "<hr>"
                    wttext += docs
                whats_this = wttext

        self.title.setTitle(txt_list)
        self.title.setToolTip(tooltip)
        self.title.setWhatsThis(whats_this)
        if self.command():
            if self.command().need_reuse():
                self._reuseSet(True)
            if self.command().reused()[0]:
                self._reuseForced()

    def _removeCurrentView(self):
        """
        Remove the parameter view for given object.

        Arguments:
            obj (Parameter): Command's parameter.
        """
        curview = self.currentParameterView()
        if curview is not None:
            master = curview.view().masterItem()
            if master is not None and master.slaveItem() == curview.view():
                master.setSlaveItem(None)
            curview.view().setMasterItem(None)
            view = self._parentView(curview)
            if view is not None:
                self.views.setCurrentWidget(view)
                self.astergui().action(ActionType.HideUnused).setChecked(False)
                self._groupsInvolved(not view.hideSummary())
            self.views.removeWidget(curview)
            disconnect(curview.valueChanged, self._startUpdateSummaryView)
            curview.deleteLater()
        self._updateState()

    def _viewByPath(self, path):
        """Returns the view associated with a *ParameterPath*."""
        view = None
        for i in range(self.views.count()):
            the_view = self.views.widget(i)
            if the_view.path().isEqual(path):
                view = the_view
                break
        return view

    def _parentView(self, curview):
        view = None
        path = curview.path()
        while path is not None and view is None:
            path = path.parentPath()
            view = self._viewByPath(path)
        return view

    def _gotoParameter(self, path, link):
        """
        Activate the parameter view for object with given id.

        Arguments:
            uid (int): Object's UID.
        """
        curview = self.currentParameterView()
        act_item = curview.view().findItemByPath(path)
        child_val = None
        self._groupsInvolved(False)
        wid = self._createParameterView(path, link)
        disconnect(curview.valueChanged, self._startUpdateSummaryView)
        connect(wid.valueChanged, self._startUpdateSummaryView)
        if act_item is not None:
            child_val = act_item.itemValue()
            act_item.setSlaveItem(wid.view())
        wid.view().setMasterItem(act_item)
        self.astergui().action(ActionType.HideUnused).setChecked(False)
        if not wid.hideSummary():
            self._groupsInvolved(True)
        self.views.setCurrentWidget(wid)
        wid.view().setItemValue(child_val)
        self._updateState()
        self.updateButtonStatus()

    def _createParameterView(self, path, link):
        """
        Create parameter view for given object.

        Arguments:
            path (ParameterPath): Path of parameter to edit.

        Returns:
            ParameterWindow: Parameter view for parameter path.
        """
        pview = None
        if link == EditorLink.Table:
            pview = ParameterTableWindow(path, self, self.views)
        elif link == EditorLink.List:
            pview = ParameterListWindow(path, self, self.views)
        elif link == EditorLink.GrMa:
            pview = ParameterMeshGroupWindow(path, self, self.views)
        else:
            pview = ParameterFactWindow(path, self, self.views)
        connect(pview.gotoParameter, self._gotoParameter)
        self.views.addWidget(pview)
        return pview

    def _unusedVisibility(self, checked):
        """
        Invoked when 'Hide unused' button toggled
        """
        curview = self.currentParameterView()
        curview.setUnusedVisibile(not checked)

    def _groupsInvolved(self, checked):
        """
        Invoked when 'Groups involved' button toggled.
        """
        groups_involved = self.astergui().action(ActionType.CommandGroups)
        if self.sender() == self.astergui().action(ActionType.CommandGroups):
            groups_involved.user_status = checked
        else:
            groups_involved.panel_status = checked
        groups_involved.setEnabled(groups_involved.panel_status)
        self._updateSummaryView()

    def _startUpdateSummaryView(self):
        self._summaryTimer.stop()
        self._summaryTimer.start()

    def _updateSummaryView(self):
        groups_involved = self.astergui().action(ActionType.CommandGroups)
        visibility = groups_involved.user_status and groups_involved.panel_status
        if visibility:
            cmd = self.command()
            title = cmd.title
            name = self._name.text()
            if name == self._nameauto:
                name = cmd.name
            wid = self._viewByPath(ParameterPath(cmd))
            storage = wid.view().itemValue()
            self.meshview().showInfo(storage=storage, title=title, name=name)
        else:
            self.meshview().hideInfo()

    def _infoHidden(self):
        """
        Invoked when 'Groups involved' panel is hidden.
        """
        self.astergui().action(ActionType.CommandGroups).setChecked(False)

    def meshview(self):
        """
        Returns the central *MeshView* object
        """
        return self.astergui().workSpace().panels[Panel.View]

    def _editComment(self):
        """
        Invoked when 'Edit comment' button is clicked
        """
        astergui = self.astergui()
        panel = CommentPanel(astergui, owner=self)
        panel.node = self.command()
        self.registerChildPanel(panel)
        astergui.workSpace().panel(Panel.Edit).setEditor(panel)

    def pendingStorage(self):
        """Dictionnary being filled as this command is edited."""
        # Get the view associated with the panel on display
        wid = self.currentParameterView()

        # Get the storage dictionary associated with this view
        # *ParameterView* inherits *ParameterBlockItem*,
        # so `itemValue` can be called on it
        if wid is not None:
            return wid.view().itemValue()
        return {}

    def pendingCommandStorage(self):
        """Dictionnary of the command being edited."""

        # get view associated with the command
        wid = self._viewByPath(ParameterPath(self.command()))

        if wid is not None:
            return wid.view().itemValue()
        return {}

    def _reuseAddWidget(self):
        """Add the 'reuse' widgets if the command needs it."""
        self._reuse.setVisible(True)
        self._reuse_label.setVisible(True)

    def _reuseForced(self):
        """Force check of the 'reuse' checkbox."""
        self._reuseSet(True)
        self._reuse.setEnabled(False)

    def _reuseClicked(self):
        """Called when enable/disable check box is clicked."""
        is_on = self._reuse.isChecked()
        if is_on and not self._command.reused(self.pendingStorage())[1]:
            is_on = False
            keywords = ", ".join(self._command.reusable_keywords()[1])
            msg = translate("ParameterPanel",
                            "Before checking the box to reuse an input object, "
                            "please fill one of these keywords:\n"
                            "{0}").format(keywords)
            MessageBox.information(self.astergui().mainWindow(),
                                   translate("ParameterPanel",
                                             "Select reusable object"),
                                   msg)
        self._reuseSet(is_on)

    def _reuseSet(self, ison):
        """Set the value of 'reuse' checkbox."""
        self._reuse.setChecked(ison)
        self._command.reuse_input_name = ison
        if ison:
            self._name.setText(self._nameauto)
        else:
            self._name.setText(self._command.name)
        self._name.setDisabled(ison)
