# -*- coding: utf-8 -*-

# Copyright 2016 EDF R&D
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License Version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, you may download a copy of license
# from https://www.gnu.org/licenses/gpl-3.0.

"""
Parameters Panel Windows
------------------------

Implementation of the Parameters panel windows for different views.

"""


from PyQt5 import Qt as Q

from ...common import (bold, connect, get_cmd_mesh, is_medfile, is_reference,
                       preformat, load_icon, translate)
from ..widgets import FilterPanel
from .path import ParameterPath
from .views import ParameterMeshGroupView, ParameterTableView, ParameterView
from .widgets import PlotWidget

# note: the following pragma is added to prevent pylint complaining
#       about functions that follow Qt naming conventions;
#       it should go after all global functions
# pragma pylint: disable=invalid-name

class ParameterWindow(FilterPanel):
    """Base widget for Command or Parameter editing."""

    gotoParameter = Q.pyqtSignal(ParameterPath, str)
    valueChanged = Q.pyqtSignal()

    HIDE_SUMMARY = False

    # pragma pylint: disable=unused-argument
    def __init__(self, path, panel, parent):
        """
        Create widget.

        Arguments:
            obj (Command, Parameter): Command or Parameter being edited.
            parent (Optional[QWidget]): Parent widget.
        """
        FilterPanel.__init__(self, parent)
        self._view = None
        self._panel = panel

    def path(self):
        """
        Returns the item path of the view.

        Returns:
            ParameterPath: Root item path.
        """
        return self.view().itemPath()

    def panel(self):
        """
        Gets the parameter panel.

        Returns:
            (ParameterPanel): Parameter panel object.
        """
        return self._panel

    def setUnusedVisibile(self, state):
        """
        Sets the visibility of unsed items in the view.

        Arguments:
            state (bool): visibility state for unsed items.
        """
        self.view().setUnusedVisibile(state)

    def view(self):
        """
        Gets the parameter view placed in window.

        Returns:
            ParameterView: parameter view.
        """
        return self._view

    def updateTranslations(self):
        """
        Update translations in GUI elements.
        """
        if self.view() is not None:
            self.view().updateTranslations()
            self.applyFilter()

    def hideSummary(self):
        """
        Check if this window needs Summary panel to be hidden.
        """
        return self.HIDE_SUMMARY

    def _setView(self, view):
        """
        Sets the parameter view into window.

        Arguments:
            view (ParameterView): parameter view.
        """
        if self._view != view:
            self._view = view
            connect(self._view.gotoParameter, self.gotoParameter)
            connect(self._view.ensureVisible, self._ensureVisible)
            connect(self._view.valuesChanged, self.valueChanged)

    def _ensureVisible(self, rect):
        """
        Ensure visible the specified rectangle in the scrolled area.

        Arguments:
            rect (QRect): rectangle that should be visible.
        """
        pos = rect.center()
        xmargin = rect.width() / 2
        ymargin = rect.height() / 2
        self._scroll.ensureVisible(pos.x(), pos.y(), xmargin, ymargin)


class ParameterFactWindow(ParameterWindow):
    """Edition widget for Command or complex parameter (Fact)."""

    def __init__(self, path, panel, parent):
        """
        Create widget.

        Arguments:
            obj (Command, Parameter): Command or Parameter being edited.
            parent (Optional[QWidget]): Parent widget.
        """
        super().__init__(path, panel, parent)
        view = ParameterView(panel, item_path=path,
                             parent_item=None, parent=self)
        self._setView(view)
        self.addWidget(view)


class ParameterListWindow(ParameterWindow):
    """Edition widget for list or Parameters."""

    def __init__(self, path, panel, parent):
        """
        Create widget.

        Arguments:
            obj (Command, Parameter): Command or Parameter being edited.
            parent (Optional[QWidget]): Parent widget.
        """
        super().__init__(path, panel, parent)
        view = ParameterView(panel, item_path=path,
                             parent_item=None, parent=self)
        self._setView(view)
        self._search.setVisible(False)
        self.add = Q.QPushButton(translate("ParameterPanel", "Add item"))
        self.add.setIcon(load_icon("as_pic_add_row.png"))
        connect(self.add.clicked, self._addListItem)
        self.add.setObjectName(self.add.text())
        self.addControlWidget(self.add)
        self.addWidget(view)

        connect(view.appendEnabled, self.add.setEnabled)

    def _addListItem(self):
        """
        Called when 'Add' button is clicked in list parameter view.
        """
        self.view().createItem()


class ParameterTableWindow(ParameterWindow):
    """Edition widget for table in function definition."""

    AppendRow = 0       # Action: append row
    InsertRow = 1       # Action: insert row
    RemoveRow = 2       # Action: remove rows
    MoveRowUp = 3       # Action: move rows up
    MoveRowDown = 4     # Action: move rows down
    FunctionPlot = 5    # Action: plot function
    Import = 6          # Action: import table
    Copy = 7            # Action: copy table data
    Cut = 8             # Action: cut table data
    Paste = 9           # Action: paste table data
    Clear = 10          # Action: clear table data

    def __init__(self, path, panel, parent):
        """
        Create widget.

        Arguments:
            obj (Command, Parameter): Command or Parameter being edited.
            parent (Optional[QWidget]): Parent widget.
        """
        super().__init__(path, panel, parent)
        view = ParameterTableView(panel, item_path=path,
                                  parent_item=None, parent=self)
        self._actions = {}
        self._setView(view)
        self._search.setVisible(False)
        self._plot = None

        if view.canPlot():
            self._plot = PlotWidget(view, self)
            self._plot.hide()

            splitter = Q.QSplitter(self)
            splitter.setOrientation(Q.Qt.Vertical)
            splitter.addWidget(view)
            splitter.addWidget(self._plot)
            self._scroll.setWidget(splitter)
        else:
            self._scroll.setWidget(view)

        tbar = Q.QToolBar(self)
        tbar.setToolButtonStyle(Q.Qt.ToolButtonIconOnly)

        tbar.addAction(\
            self._createAction(ParameterTableWindow.AppendRow,
                               load_icon("as_pic_add_row.png"),
                               translate("ParameterPanel", "Append row"),
                               translate("ParameterPanel",
                                         "Append row to the end of table"),
                               None,
                               view.appendRow))

        tbar.addAction(\
            self._createAction(ParameterTableWindow.InsertRow,
                               load_icon("as_pic_insert_row.png"),
                               translate("ParameterPanel", "Insert row"),
                               translate("ParameterPanel",
                                         "Insert row at current position"),
                               None,
                               view.insertRow))

        tbar.addAction(\
            self._createAction(ParameterTableWindow.RemoveRow,
                               load_icon("as_pic_remove_row.png"),
                               translate("ParameterPanel", "Remove rows"),
                               translate("ParameterPanel",
                                         "Remove selected rows"),
                               None,
                               view.removeRows))

        tbar.addSeparator()

        tbar.addAction(\
            self._createAction(ParameterTableWindow.MoveRowUp,
                               load_icon("as_pic_move_up.png"),
                               translate("ParameterPanel", "Move up"),
                               translate("ParameterPanel",
                                         "Move selected rows up"),
                               "Ctrl+Up",
                               view.moveRowsUp))

        tbar.addAction(\
            self._createAction(ParameterTableWindow.MoveRowDown,
                               load_icon("as_pic_move_down.png"),
                               translate("ParameterPanel", "Move down"),
                               translate("ParameterPanel",
                                         "Move selected rows down"),
                               "Ctrl+Down",
                               view.moveRowsDown))

        tbar.addSeparator()

        if self._plot is not None:
            tbar.addAction(\
                self._createAction(ParameterTableWindow.FunctionPlot,
                                   load_icon("as_pic_show_plot.png"),
                                   translate("ParameterPanel",
                                             "Plot function"),
                                   translate("ParameterPanel",
                                             "Show/hide plot view"),
                                   None,
                                   self._plot.setVisible, True))
            tbar.addSeparator()

        if view.canImport():
            tbar.addAction(\
                self._createAction(ParameterTableWindow.Import,
                                   load_icon("as_pic_import_table.png"),
                                   translate("ParameterPanel",
                                             "Import table (separators: "
                                             "'.'  for decimals "
                                             "and ',' for columns)"),
                                   translate("ParameterPanel",
                                             "Import function data from file "
                                             "(separators: "
                                             "'.' for decimals "
                                             "and ',' for columns)"),
                                   None,
                                   view.importFile))

            tbar.addSeparator()

        tbar.addAction(\
            self._createAction(ParameterTableWindow.Copy,
                               load_icon("as_pic_copy.png"),
                               translate("AsterStudy", "Copy"),
                               translate("AsterStudy", "Copy data"),
                               "Ctrl+C",
                               view.copy))

        tbar.addAction(\
            self._createAction(ParameterTableWindow.Cut,
                               load_icon("as_pic_cut.png"),
                               translate("AsterStudy", "Cut"),
                               translate("AsterStudy", "Cut data"),
                               "Ctrl+X",
                               view.cut))

        tbar.addAction(\
            self._createAction(ParameterTableWindow.Paste,
                               load_icon("as_pic_paste.png"),
                               translate("AsterStudy", "Paste"),
                               translate("AsterStudy", "Paste data"),
                               "Ctrl+V",
                               view.paste))


        tbar.addAction(\
            self._createAction(ParameterTableWindow.Clear,
                               load_icon("as_pic_delete.png"),
                               translate("AsterStudy", "Clear"),
                               translate("AsterStudy", "Clear data"),
                               "Del",
                               view.clear))

        view.addAction(self._action(ParameterTableWindow.MoveRowUp))
        view.addAction(self._action(ParameterTableWindow.MoveRowDown))
        view.addAction(self._action(ParameterTableWindow.Copy))
        view.addAction(self._action(ParameterTableWindow.Cut))
        view.addAction(self._action(ParameterTableWindow.Paste))
        view.addAction(self._action(ParameterTableWindow.Clear))

        self.addControlWidget(tbar)

        connect(view.selectionChanged, self._updateState)
        connect(Q.QApplication.clipboard().dataChanged, self._updateState)

        view.setContextMenuPolicy(Q.Qt.CustomContextMenu)
        view.customContextMenuRequested.connect(self._popupMenuRequest)

        self._updateState()

    def _action(self, actionid):
        """
        Gets the internal action by given identifier.
        """
        return self._actions.get(actionid)

    def _createAction(self, actionid, icon, text,
                      tooltip, shortcut, slot, toggled=False):
        """
        Creates the new internal action with given identifier.
        """
        action = Q.QAction(icon, text, self)
        if shortcut:
            action.setShortcut(shortcut)
            action.setShortcutContext(Q.Qt.WidgetWithChildrenShortcut)
            text = preformat("{0} ({1})".format(text, bold(shortcut)))
        action.setToolTip(text)
        action.setStatusTip(tooltip)
        action.setCheckable(toggled)
        if slot is not None:
            if action.isCheckable():
                connect(action.toggled, slot)
            else:
                connect(action.triggered, slot)
        self._actions[actionid] = action
        return action

    def _updateState(self):
        """
        Updates the actions according current selection
        """
        hassel = len(self.view().selectedRows()) > 0
        self._action(ParameterTableWindow.InsertRow).setEnabled(hassel)
        self._action(ParameterTableWindow.RemoveRow).setEnabled(hassel)
        self._action(ParameterTableWindow.MoveRowUp).setEnabled(hassel)
        self._action(ParameterTableWindow.MoveRowDown).setEnabled(hassel)
        is_ok = self.view().canCopy()
        self._action(ParameterTableWindow.Copy).setEnabled(is_ok)
        is_ok = self.view().canCut()
        self._action(ParameterTableWindow.Cut).setEnabled(is_ok)
        is_ok = self.view().canPaste()
        self._action(ParameterTableWindow.Paste).setEnabled(is_ok)
        is_ok = self.view().canClear()
        self._action(ParameterTableWindow.Clear).setEnabled(is_ok)

    @Q.pyqtSlot("QPoint")
    def _popupMenuRequest(self, pos):
        separator = Q.QAction()
        separator.setSeparator(True)
        actions = [self._action(ParameterTableWindow.Copy),
                   self._action(ParameterTableWindow.Cut),
                   self._action(ParameterTableWindow.Paste),
                   separator,
                   self._action(ParameterTableWindow.Clear)]
        Q.QMenu.exec_(actions, self.view().mapToGlobal(pos))


class ParameterMeshGroupWindow(ParameterWindow):
    """Edition widget for mesh group selection."""

    HIDE_SUMMARY = True

    def __init__(self, path, panel, parent):
        """
        Create widget.

        Arguments:
            obj (Command, Parameter): Command or Parameter being edited.
            parent (Optional[QWidget]): Parent widget.
        """
        super().__init__(path, panel, parent)
        self._view = ParameterMeshGroupView(panel, item_path=path,
                                            parent_item=None, parent=self)
        connect(self._view.meshChanged, self.applyFilter)
        mesh = self._view.mesh()
        if mesh is not None:
            file_name, nom_med = get_cmd_mesh(mesh)
            if is_medfile(file_name) or is_reference(file_name):
                self._view.meshFileChanged.emit(file_name, nom_med, 0.1, False)
        self._setView(self._view)
        self.addWidget(self._view)


    def hideEvent(self, args):
        """
        Hide widget and reload Mesh view with opacity 1.
        """
        super().hideEvent(args)
        mesh = self._view.mesh()
        if mesh is not None:
            file_name, nom_med = get_cmd_mesh(mesh)
            if is_medfile(file_name) or is_reference(file_name):
                self._view.meshFileChanged.emit(file_name, nom_med, 1, True)
