# -*- coding: utf-8 -*-
import os
import sys
from PyQt5 import Qt as Q
osp = os.path

as_dir = osp.join(os.environ['HOME'], 'dev', 'smeca', 
            'salome-codeaster-study')
sys.path.append(as_dir)

from asterstudy.post.representation import BaseRep
from asterstudy.gui.results import Results
from asterstudy.gui.salomegui import (get_salome_pyqt)

class LightResults(Results):
    def set_as_working_tab(self):
        return

    def detach(self):
        return

    def init_paraview(self, full_load_pv):
        import pvsimple as pvs

        if not(self.pv_view):
            get_salome_pyqt().activateModule('ParaViS')
            views = get_salome_pyqt().findViews('ParaView')
            if not views:
                get_salome_pyqt().createView('ParaView', True, 0, 0, True)
            views = get_salome_pyqt().findViews('ParaView')
            self.pv_view = views[-1]

        self.update_pv_layout_view()
        self._finalize_pv_widget()

        if self.current:
            self.redraw()

class PostProcessor(Q.QMainWindow):
    """
    Implementation d'une classe Qt basée sur un layout créé
    avec qtdesigner 
    """
    def __init__(self, parent=None):
        """
        Initialization
        """
        super().__init__(parent)

        self.results = LightResults(None, self)
        self.setCentralWidget(self.results)

        # example_med = osp.join(as_dir, 'data', 'post', '3d_thermo_meca.med')
        example_med = osp.join(as_dir, 'data', 'post', 'forma01a.med')
        # example_med = '/home/J64371/Desktop/asterstudy/resu_final2b.rmed'
        self.results.load_med_result_call(example_med)

        self.setWindowTitle('Post-processor standalone')
        self.setWindowState(Q.Qt.WindowMaximized)


if __name__ == "__main__":
    """
    Entry point
    """
    # Activate post processor
    app = PostProcessor()

    # Hide Salome main window
    # Q.qApp.activeWindow().setVisible(False)

    app.show()

