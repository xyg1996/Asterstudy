# -*- coding: utf-8 -*-

# Copyright 2019 EDF R&D
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License Version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, you may download a copy of license
# from https://www.gnu.org/licenses/gpl-3.0.

"""
Results Navigator
-----------------

Implementation of ResultsNavigatorModel for AsterStudy application.

Defines the interaction model with the contents of loaded result files.

"""

from PyQt5 import Qt as Q

from ...gui import get_icon


class ResultsNavigatorModel(Q.QStandardItemModel):
    """
    Tree Model side bar for concept and field navigation
    """

    results = view = None

    def __init__(self, *args):
        """Create navigator tree model side bar asociated with the results tab."""
        Q.QStandardItemModel.__init__(self, *args)

    def set_results(self, results):
        """Sets a reference to the results workspace"""
        self.results = results

    def clear(self, *args):
        """Clears the tree view contents"""
        Q.QStandardItemModel.clear(self, *args)
        self.view.customize()

    # pragma pylint: disable=no-self-use,unused-argument
    def flags(self, index):
        """Returns the item flags for the given table index."""
        return Q.Qt.ItemIsEnabled | Q.Qt.ItemIsSelectable

    def data(self, index, role=Q.Qt.DisplayRole):
        """
        Returns data stored by model index for given role.
        Used in this context to decorate concepts/fields
        - Bold font for selected items
        - Icons according to field type
        """
        if self.results.current is None:
            return super(ResultsNavigatorModel, self).data(index, role)

        if role == Q.Qt.DecorationRole:
            if index.column() > 0:
                return None
            root = self.data(index)  # Root node : Concept OR field name
            if self.results.current.lookup(root):
                deco = 'Concept'
            else:
                par = self.data(index.parent())
                concept = self.results.current.lookup(par)
                if concept is None:
                    return super(ResultsNavigatorModel, self).data(index, role)
                field = concept.lookup(root)
                supp = field.info['support'][:-1].title()  # point or cell
                deco = '%s Field' % (supp)
            return get_icon(deco)

        return super(ResultsNavigatorModel, self).data(index, role)
