# -*- coding: utf-8 -*-

# Copyright 2019 EDF R&D
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License Version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, you may download a copy of license
# from https://www.gnu.org/licenses/gpl-3.0.

"""
GroupsTable: QTableView based on CustomTable, used to get user input
regarding the mesh groups for filtering the post processed results.
"""

from PyQt5 import Qt as Q

from ...gui import get_icon
from ..plotter.table import (CustomTable, GenericTableModel,
                             TableParams, ok_validator)

# from asterstudy.gui import get_icon
# from asterstudy.post.plotter.table import (CustomTable, GenericTableModel,
#     TableParams, ok_validator)


class GroupsTable(CustomTable):
    """GroupsTable implementation, based on CustomTable"""

    def __init__(self, *args):
        """
        Initialization of the colorbar table
        """
        CustomTable.__init__(self, *args)
        # self.setVerticalScrollBarPolicy(Q.Qt.ScrollBarAlwaysOff)

    def contextMenuEvent(self, _, extraActions=None):
        """
        Customized context menu event
        """
        return

    @Q.pyqtSlot()
    def doubleClickTable(self):
        """ Slot is called by double click in table cell. """
        if not self.selectedIndexes():
            return
        index = self.selectedIndexes()[0]
        row, _ = index.row(), index.column()
        self.model().toggle_visibility(row)
        self.clearSelection()

    def pasteSelection(self):
        """Overloaded paste function"""
        return


class GroupsTableModel(GenericTableModel):
    """
    Based on GenericTableModel in order to customize and
    control the GroupsTable for filtering results on
    mesh groups
    """

    def __init__(self, params, basis, parent=None):
        """Create Generic Table Model."""
        GenericTableModel.__init__(self, params, basis, parent)

    def flags(self, index):
        """
        Returns the item flags for the given table index
        """
        flags = Q.Qt.ItemIsEditable |\
            Q.Qt.ItemIsEnabled |\
            Q.Qt.ItemIsSelectable

        flags ^= Q.Qt.ItemIsEditable  # non-editable
        return flags

    def data(self, index, role):
        """
        Returns the data or decorations for the given index
        """
        row = index.row()
        column = index.column()

        col_header = self.params.headers[column]

        if role == Q.Qt.DecorationRole:
            out = None
            if col_header == '_Visible':
                visible = self.basis[row][column]
                if visible:
                    out = get_icon("Group Visible")
            elif col_header == 'Group Name':
                if int(self.basis[row][-1]) > 0:
                    out = get_icon("Point Field")
                else:
                    out = get_icon("Cell Field")
            return out

        if role == Q.Qt.TextAlignmentRole:
            return None

        return GenericTableModel.data(self, index, role)

    def toggle_visibility(self, row):
        """
        Toggles the visibility for a given group
        """
        visible = self.basis[row][1]
        self.basis[row][1] = not visible
        self.layoutChanged.emit()
        self.itemsChanged.emit()

    def set_groups(self, groups):
        """
        Sets the groups in the basis to user defined values
        """
        from copy import deepcopy as dc
        self.basis = dc(groups)
        self.layoutChanged.emit()

    def get_groups(self):
        """
        Exports group visibility
        """
        from copy import deepcopy as dc
        return dc(self.basis)


class GroupsFilterForm(Q.QWidget):
    """
    Implementation of a user entry form for selecting the filtering
    groups. The form is simply a container of the groups filter
    table.
    """

    stateChanged = Q.pyqtSignal()

    def __init__(self, value=None, parent=None):
        """Initialize the Groups form"""
        super(GroupsFilterForm, self).__init__(parent)

        self.setSizePolicy(Q.QSizePolicy.Expanding,
                           Q.QSizePolicy.Expanding)
        layout = Q.QVBoxLayout(self)

        self.table = GroupsTable(self)
        # self.table.setReadOnly(True)

        params = TableParams()
        params.headers = ('Group Name', '_Visible')
        params.validators = [ok_validator, ok_validator]
        params.column_widths = [1.0, 30]

        basis = [['Dummy group 1', False, '1'],
                 ['Dummy group 2', False, '-1'], ]

        model = GroupsTableModel(params, [basis])
        self.table.setModel(model)

        model.itemsChanged.connect(self.stateChanged.emit)

        layout.addWidget(self.table)
        self.set_value(value)

    def set_value(self, value):
        """
        Mandatory CustomValidator function, read or updates the
        groups filter table values
        """
        if value:
            model = self.table.model()
            model.set_groups(value)

    def value(self):
        """
        Mandatory CustomValidator function that returns the values
        in the table (then passed to rep.opts)
        """
        model = self.table.model()
        return model.get_groups()

    # pragma pylint: disable=no-self-use
    def check(self):
        """
        Mandatory CustomValidator function that returns whether the
        user input is valid. For this case, it is always true.
        """
        return True

    # pragma pylint: disable=invalid-name
    def resizeEvent(self, event):
        """
        Qt generic callback to handle resize events
        """
        super(GroupsFilterForm, self).resizeEvent(event)
        self.table.setColumnDimensions()


# def __main__():
#     import sys

#     app = Q.QApplication(sys.argv)

#     # w = Q.QMainWindow()

#     v = GroupsFilterForm()
#     v.setWindowTitle('Testing groups filter widget')
#     v.show()

#     sys.exit(app.exec_())


# if __name__ == "__main__":
#     __main__()
